{
  "name": "X12 EDI 837 Workflow",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a55ebbb4-3eba-4584-8894-9e8d623d498f",
              "name": "documentType",
              "type": "string",
              "value": "=Healthcare Claim (837)"
            },
            {
              "id": "cbbff4da-4679-4258-bc3c-848075c5f1df",
              "name": "claimReferenceId",
              "type": "string",
              "value": "={{ $json.transactionSetHeader.implementationConventionReference }}"
            },
            {
              "id": "a2eb5f07-8d1b-4c3a-b08b-a785045aeb34",
              "name": "claimDate",
              "type": "string",
              "value": "={{ $json.interchangeHeader.date }}"
            },
            {
              "id": "7e319d29-463b-4875-b556-684cb0c06c59",
              "name": "submitterName",
              "type": "string",
              "value": "={{ $json.submitter.submitterName }}"
            },
            {
              "id": "5c9fc86c-e5c0-411f-a7d5-1121b5779906",
              "name": "billingProviderName",
              "type": "string",
              "value": "={{ $json.billingProvider.billingProviderName }}"
            }
          ]
        },
        "options": {}
      },
      "id": "4919c6ff-e9e0-43fb-9c21-7cb6d9b318ea",
      "name": "Healthcare Claim Information",
      "type": "n8n-nodes-base.set",
      "position": [
        1232,
        336
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4",
          "mode": "list",
          "cachedResultName": "Healthcare EDI",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Professional and Institutional",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "claimReferenceId",
              "displayName": "claimReferenceId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "claimDate",
              "displayName": "claimDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "submitterName",
              "displayName": "submitterName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billingProviderName",
              "displayName": "billingProviderName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Sender_ID",
              "displayName": "interchange_Sender_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Receiver_ID",
              "displayName": "interchange_Receiver_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Date",
              "displayName": "interchange_Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "transaction_Set_ID",
              "displayName": "transaction_Set_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "submitter_Name",
              "displayName": "submitter_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "receiver_Name",
              "displayName": "receiver_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billing_Provider_Name",
              "displayName": "billing_Provider_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billing_Provider_Address_1",
              "displayName": "billing_Provider_Address_1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billing_Provider_City",
              "displayName": "billing_Provider_City",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billing_Provider_State",
              "displayName": "billing_Provider_State",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billing_Provider_Zip",
              "displayName": "billing_Provider_Zip",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "hl_ID",
              "displayName": "hl_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "hl_Level_Code",
              "displayName": "hl_Level_Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "hl_Description",
              "displayName": "hl_Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "provider_Taxonomy_Code",
              "displayName": "provider_Taxonomy_Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "subscriber_Filing_Indicator",
              "displayName": "subscriber_Filing_Indicator",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_First_Name",
              "displayName": "patient_First_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_Last_Name",
              "displayName": "patient_Last_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_ID",
              "displayName": "patient_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "d7f28ba8-c987-42ba-b105-9028a34b96fb",
      "name": "Healthcare Claims",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1872,
        416
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zQDGxhNE1O5PANgU",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "38358bb8-1b5a-4adc-816d-6710f53f7c0d",
              "name": "=body",
              "type": "string",
              "value": "={{ $json.data.replace(/\\\\n/g, '\\n').replace(/^'|'$/g, '') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "89395897-edbf-4a83-b93e-519e1fd64ea4",
      "name": "Extract Body",
      "type": "n8n-nodes-base.set",
      "position": [
        -464,
        432
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "mode": "combineBySql"
      },
      "id": "640fb9cb-d903-4eda-90e5-9fe2433ec796",
      "name": "Claim Info + Hierarchical Data",
      "type": "n8n-nodes-base.merge",
      "position": [
        1648,
        416
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "function transformToClaims(parsedEDI) {\n  const claims = [];\n  \n  const headerObj = {\n    interchange_Sender_ID: parsedEDI.interchangeHeader?.submitterId?.trim() || '',\n    interchange_Receiver_ID: parsedEDI.interchangeHeader?.receiverId?.trim() || '',\n    interchange_Date: parsedEDI.interchangeHeader?.date || '',\n    transaction_Set_ID: parsedEDI.transactionSetHeader?.transactionSetIdentifierCode || '',\n    submitter_Name: parsedEDI.submitter?.submitterName || '',\n    receiver_Name: parsedEDI.receiver?.receiverName || '',\n    billing_Provider_Name: parsedEDI.billingProvider?.billingProviderName || ''\n  };\n  \n  if (parsedEDI.hierarchicalLoops && Array.isArray(parsedEDI.hierarchicalLoops)) {\n    parsedEDI.hierarchicalLoops.forEach((hl) => {\n      // Handle Loop 2000A (Billing Provider) - contains subscribers and patients\n      if (hl.loop === '2000A') {\n        \n        // Process subscribers within the billing provider\n        if (hl.subscribers && Array.isArray(hl.subscribers)) {\n          hl.subscribers.forEach((subscriber) => {\n            if (subscriber.claims && Array.isArray(subscriber.claims)) {\n              subscriber.claims.forEach((claim) => {\n                const claimObj = {\n                  ...headerObj,\n                  patient_First_Name: subscriber.subscriber?.firstName || '',\n                  patient_Last_Name: subscriber.subscriber?.lastName || '',\n                  patient_ID: subscriber.subscriber?.memberId || '',\n                  payer_Name: subscriber.payer?.payerName || '',\n                  patient_Birthdate: subscriber.demographicInfo?.birthdate || '',\n                  patient_Gender: subscriber.demographicInfo?.gender || '',\n                  claim_ID: claim.claimSubmitterIdentifier || '',\n                  total_Claim_Charge: claim.totalClaimChargeAmount || '0.00',\n                  diagnosis_Codes: claim.diagnosisCodes?.map(d => d.diagnosisCode).join(', ') || '',\n                  service_Count: claim.serviceLines?.length || 0\n                };\n                \n                // If claim has service lines, create a row for each service\n                if (claim.serviceLines && claim.serviceLines.length > 0) {\n                  claim.serviceLines.forEach((service) => {\n                    claims.push({\n                      ...claimObj,\n                      service_Line_Number: service.lineNumber || '',\n                      procedure_Code: service.procedureCode || '',\n                      service_Charge: service.charge || '0.00',\n                      service_Date: service.serviceDate || '',\n                      service_Units: service.units || ''\n                    });\n                  });\n                } else {\n                  // Claim without services\n                  claims.push({\n                    ...claimObj,\n                    service_Line_Number: '',\n                    procedure_Code: '',\n                    service_Charge: '0.00',\n                    service_Date: '',\n                    service_Units: ''\n                  });\n                }\n              });\n            }\n          });\n        }\n        \n        // Process patients within the billing provider\n        if (hl.patients && Array.isArray(hl.patients)) {\n          hl.patients.forEach((patient) => {\n            if (patient.claims && Array.isArray(patient.claims)) {\n              // Find the corresponding subscriber for payer information\n              const parentSubscriber = hl.subscribers?.find(sub => \n                sub.hierarchicalId === patient.hierarchicalParent\n              );\n              \n              patient.claims.forEach((claim) => {\n                const claimObj = {\n                  ...headerObj,\n                  patient_First_Name: patient.patient?.firstName || '',\n                  patient_Last_Name: patient.patient?.lastName || '',\n                  patient_ID: patient.patient?.patientId || parentSubscriber?.subscriber?.memberId || '',\n                  payer_Name: parentSubscriber?.payer?.payerName || '',\n                  patient_Birthdate: patient.demographicInfo?.birthdate || '',\n                  patient_Gender: patient.demographicInfo?.gender || '',\n                  claim_ID: claim.claimSubmitterIdentifier || '',\n                  total_Claim_Charge: claim.totalClaimChargeAmount || '0.00',\n                  diagnosis_Codes: claim.diagnosisCodes?.map(d => d.diagnosisCode).join(', ') || '',\n                  service_Count: claim.serviceLines?.length || 0\n                };\n                \n                // If claim has service lines, create a row for each service\n                if (claim.serviceLines && claim.serviceLines.length > 0) {\n                  claim.serviceLines.forEach((service) => {\n                    claims.push({\n                      ...claimObj,\n                      service_Line_Number: service.lineNumber || '',\n                      procedure_Code: service.procedureCode || '',\n                      service_Charge: service.charge || '0.00',\n                      service_Date: service.serviceDate || '',\n                      service_Units: service.units || ''\n                    });\n                  });\n                } else {\n                  // Claim without services\n                  claims.push({\n                    ...claimObj,\n                    service_Line_Number: '',\n                    procedure_Code: '',\n                    service_Charge: '0.00',\n                    service_Date: '',\n                    service_Units: ''\n                  });\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n  }\n  \n  return claims;\n}\n\nconst parsedEDI = $input.all()[0].json;\nif (!parsedEDI || !parsedEDI.interchangeHeader) {\n  throw new Error('Invalid healthcare EDI data format.');\n}\n\nconst claimsData = transformToClaims(parsedEDI);\nreturn { json: { data: claimsData } };"
      },
      "id": "93106a55-05eb-4a51-a482-ded974404f74",
      "name": "Flatten Healthcare Data",
      "type": "n8n-nodes-base.code",
      "position": [
        1120,
        528
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "id": "52be3c7a-a79c-4b6c-95a2-8ffb62f18892",
      "name": "Split Out by Hierarchical Level",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1344,
        528
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "/files/test.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1344,
        128
      ],
      "id": "cd7841dd-59ca-45f9-ba9a-238d6627ae54",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1120,
        128
      ],
      "id": "0548e118-dd61-4fec-824c-a8e66ba7e3e3",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "html": "{{ $json.html }}"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        1344,
        720
      ],
      "id": "f4a5ce59-424d-4abd-86b4-f84d2d8d1b2b",
      "name": "Healthcare Claims HTML Display",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// Get the parsed EDI data\nconst parsedEDI = $input.first().json;\n\n// The parsed data is an array, so get the first element\nconst ediData = Array.isArray(parsedEDI) ? parsedEDI[0] : parsedEDI;\n\n// Extract claimants from the new nested structure\nconst claimantLoops = [];\n\nif (ediData.hierarchicalLoops && Array.isArray(ediData.hierarchicalLoops)) {\n  ediData.hierarchicalLoops.forEach(hl => {\n    if (hl.loop === '2000A') {\n      // Get subscribers from within billing provider\n      if (hl.subscribers && Array.isArray(hl.subscribers)) {\n        hl.subscribers.forEach(subscriber => {\n          if (subscriber.claims && subscriber.claims.length > 0) {\n            claimantLoops.push(subscriber);\n          }\n        });\n      }\n      \n      // Get patients from within billing provider\n      if (hl.patients && Array.isArray(hl.patients)) {\n        hl.patients.forEach(patient => {\n          if (patient.claims && patient.claims.length > 0) {\n            // Add subscriber context to patient for insurance info\n            const parentSubscriber = hl.subscribers?.find(sub => \n              sub.hierarchicalId === patient.hierarchicalParent\n            );\n            patient._parentSubscriber = parentSubscriber;\n            claimantLoops.push(patient);\n          }\n        });\n      }\n    }\n  });\n}\n\nconst parsedSummary = ediData.summary;\n\nfunction formatDate(dateStr) {\n    if (!dateStr || dateStr.length < 8) return 'N/A';\n    const year = dateStr.substring(0, 4);\n    const month = dateStr.substring(4, 6);\n    const day = dateStr.substring(6, 8);\n    return `${month}/${day}/${year.substring(2)}`;\n}\n\nfunction cleanText(text) {\n    return text ? text.replace(/\\n/g, ' ').trim() : 'N/A';\n}\n\n// Generate patient sections\nconst patientSections = claimantLoops.map((claimant, index) => {\n    const firstClaim = claimant.claims?.[0];\n    const diagCodes = firstClaim?.diagnosisCodes?.map(d => d.diagnosisCode) || [];\n    const services = firstClaim?.serviceLines || [];\n    \n    // Determine if this is a subscriber or patient\n    const isPatient = claimant.loop === '2000C';\n    const displayEntity = isPatient ? claimant.patient : claimant.subscriber;\n    \n    // Get subscriber info for context - either self or parent\n    const subscriberInfo = isPatient ? claimant._parentSubscriber : claimant;\n    \n    const displayName = displayEntity ? \n        `${cleanText(displayEntity.lastName)}, ${cleanText(displayEntity.firstName)}` : \n        'Unknown Patient';\n    \n    return `\n        <div class=\"patient-section\">\n            <h2 style=\"background: #e3f2fd; padding: 15px; margin: 0 0 20px 0; border-radius: 5px;\">\n                ${isPatient ? 'Patient' : 'Subscriber'} ${index + 1}: ${displayName}\n            </h2>\n            \n            <!-- Patient Key Info -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ ${isPatient ? 'PATIENT' : 'SUBSCRIBER'} INFORMATION</span>\n                    <span class=\"npi-badge\">MEMBER ID: ${subscriberInfo?.subscriber?.memberId || displayEntity?.memberId || displayEntity?.idCode || 'N/A'}</span>\n                </div>\n                <div class=\"section-content\">\n                    <div class=\"info-group\">\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Name</div>\n                            <div class=\"info-value\">${displayName}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Member ID</div>\n                            <div class=\"info-value\">${subscriberInfo?.subscriber?.memberId || displayEntity?.memberId || 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Date of Birth</div>\n                            <div class=\"info-value\">${claimant.demographicInfo ? formatDate(claimant.demographicInfo.birthdate) : 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Gender</div>\n                            <div class=\"info-value\">${\n                                (() => {\n                                    const gender = claimant.demographicInfo?.gender;\n                                    return gender === 'M' ? 'Male' : gender === 'F' ? 'Female' : 'N/A';\n                                })()\n                            }</div>\n                        </div>\n                    </div>\n                    <div class=\"info-group\">\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Relationship to Subscriber</div>\n                            <div class=\"info-value\">${isPatient ? (claimant.patientInfo?.individualRelationshipCode || 'N/A') : 'Self'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Address</div>\n                            <div class=\"info-value\">\n                                ${displayEntity?.address ? \n                                    `${cleanText(displayEntity.address.addressLine1)}<br>\n                                     ${displayEntity.address.city || ''}, ${displayEntity.address.state || ''} ${displayEntity.address.postalCode || ''}` \n                                    : 'N/A'\n                                }\n                            </div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Payer</div>\n                            <div class=\"info-value\">${cleanText(subscriberInfo?.payer?.payerName)}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Payor ID</div>\n                            <div class=\"info-value\">${subscriberInfo?.payer?.payorID || 'N/A'}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Claim Information -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ CLAIM INFORMATION</span>\n                </div>\n                <div class=\"section-content\">\n                    <div class=\"info-group\">\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Claim ID</div>\n                            <div class=\"info-value\">${firstClaim?.claimSubmitterIdentifier || 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Total Charge</div>\n                            <div class=\"info-value\">$${firstClaim?.totalClaimChargeAmount || '0.00'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Rendering Provider</div>\n                            <div class=\"info-value\">${firstClaim?.operatingPhysician ? `${cleanText(firstClaim.operatingPhysician.lastName)}, ${cleanText(firstClaim.operatingPhysician.firstName)}` : 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Provider NPI</div>\n                            <div class=\"info-value\">${firstClaim?.operatingPhysician?.npi || 'N/A'}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Diagnoses -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ DIAGNOSES (${diagCodes.length})</span>\n                </div>\n                <div class=\"section-content\">\n                    <table class=\"diagnosis-table\">\n                        <thead>\n                            <tr>\n                                <th>Code</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${diagCodes.length > 0 \n                                ? diagCodes.map(code => `\n                                    <tr>\n                                        <td><a href=\"#\" class=\"code-link\">${code}</a></td>\n                                        <td>ICD-10-CM Diagnosis</td>\n                                        <td>Diagnosis Description</td>\n                                    </tr>\n                                `).join('')\n                                : '<tr><td colspan=\"3\" style=\"text-align: center; color: #6c757d; font-style: italic;\">No diagnosis codes found</td></tr>'\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <!-- Services -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ SERVICE LINES (${services.length})</span>\n                </div>\n                <div class=\"section-content\">\n                    <table class=\"service-table\">\n                        <thead>\n                            <tr>\n                                <th>Line</th>\n                                <th>Procedure Code</th>\n                                <th>Charge</th>\n                                <th>Units</th>\n                                <th>Service Date</th>\n                                <th>Place of Service</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${services.length > 0 \n                                ? services.map((service, idx) => `\n                                    <tr>\n                                        <td>${service.lineNumber || (idx + 1)}</td>\n                                        <td><a href=\"#\" class=\"code-link\">${service.procedureCode || 'N/A'}</a></td>\n                                        <td>$${service.charge || '0.00'}</td>\n                                        <td>${service.units || '1'}</td>\n                                        <td>${formatDate(service.serviceDate)}</td>\n                                        <td>${service.placeOfServiceCode || 'N/A'}</td>\n                                    </tr>\n                                `).join('')\n                                : '<tr><td colspan=\"6\" style=\"text-align: center; color: #6c757d; font-style: italic;\">No service lines found</td></tr>'\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    `;\n}).join('');\n\n// Calculate totals across all patients\nconst totalPatients = claimantLoops.length;\nconst totalCharges = claimantLoops.reduce((total, claimant) => {\n    const claimAmount = parseFloat(claimant.claims?.[0]?.totalClaimChargeAmount || 0);\n    return total + claimAmount;\n}, 0);\n\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>X12 EDI 837 - Claims Information</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f5f5f5; padding: 20px; color: #333; }\n        .claim-container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); overflow: hidden; }\n        .claim-header { background: #f8f9fa; padding: 20px; border-bottom: 1px solid #dee2e6; }\n        .claim-title { font-size: 28px; font-weight: 600; margin-bottom: 10px; }\n        .header-info { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 15px; }\n        .header-item { text-align: center; }\n        .header-value { font-size: 18px; font-weight: 600; color: #495057; }\n        .header-label { font-size: 12px; color: #6c757d; text-transform: uppercase; margin-top: 2px; }\n        .content { padding: 20px; }\n        .section { margin-bottom: 30px; border: 1px solid #dee2e6; border-radius: 6px; overflow: hidden; }\n        .section-header { background: #f8f9fa; padding: 15px 20px; font-weight: 600; font-size: 14px; color: #495057; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #dee2e6; }\n        .section-content { padding: 20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }\n        .info-group { display: flex; flex-direction: column; gap: 8px; }\n        .info-item { display: flex; justify-content: space-between; align-items: flex-start; padding: 8px 0; border-bottom: 1px solid #f1f3f4; }\n        .info-label { font-size: 12px; color: #6c757d; text-transform: uppercase; font-weight: 500; flex: 1; margin-right: 15px; }\n        .info-value { font-size: 14px; color: #495057; font-weight: 500; flex: 2; text-align: right; }\n        .diagnosis-table, .service-table { width: 100%; border-collapse: collapse; margin-top: 15px; }\n        .diagnosis-table th, .service-table th { background: #f8f9fa; padding: 12px; text-align: left; font-weight: 600; font-size: 12px; color: #495057; text-transform: uppercase; border-bottom: 2px solid #dee2e6; }\n        .diagnosis-table td, .service-table td { padding: 12px; border-bottom: 1px solid #f1f3f4; font-size: 14px; }\n        .code-link { color: #007bff; text-decoration: none; font-weight: 500; }\n        .npi-badge { background: #e7f3ff; color: #0066cc; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; }\n        .patient-section { margin-bottom: 40px; padding-bottom: 30px; border-bottom: 3px solid #e9ecef; }\n        .patient-section:last-child { border-bottom: none; }\n    </style>\n</head>\n<body>\n    <div class=\"claim-container\">\n        <div class=\"claim-header\">\n            <h1 class=\"claim-title\">X12 EDI 837 - Claims Information</h1>\n            <div class=\"header-info\">\n                <div class=\"header-item\">\n                    <div class=\"header-value\">${totalPatients}</div>\n                    <div class=\"header-label\">TOTAL PATIENTS</div>\n                </div>\n                <div class=\"header-item\">\n                    <div class=\"header-value\">$${totalCharges.toFixed(2)}</div>\n                    <div class=\"header-label\">TOTAL CHARGES</div>\n                </div>\n                <div class=\"header-item\">\n                    <div class=\"header-value\">${formatDate(ediData.beginningOfHierarchicalTransaction?.date)}</div>\n                    <div class=\"header-label\">SUBMISSION DATE</div>\n                </div>\n                <div class=\"header-item\">\n                    <div class=\"header-value\">${cleanText(ediData.submitter?.submitterName)}</div>\n                    <div class=\"header-label\">SUBMITTER</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"content\">\n            <!-- Billing Provider Info (same for all patients) -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ BILLING PROVIDER</span>\n                    <span class=\"npi-badge\">NPI: ${ediData.billingProvider?.billingProviderIdentifier || 'N/A'}</span>\n                </div>\n                <div class=\"section-content\">\n                    <div class=\"info-group\">\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Business Name</div>\n                            <div class=\"info-value\">${cleanText(ediData.billingProvider?.billingProviderName)}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">NPI</div>\n                            <div class=\"info-value\">${ediData.billingProvider?.billingProviderIdentifier || 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Address</div>\n                            <div class=\"info-value\">\n                                ${ediData.billingProvider?.address ? \n                                    `${cleanText(ediData.billingProvider.address.addressLine1)}<br>\n                                     ${ediData.billingProvider.address.city || ''}, ${ediData.billingProvider.address.state || ''} ${ediData.billingProvider.address.postalCode || ''}` \n                                    : 'N/A'\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Individual Patient Sections -->\n            ${patientSections}\n        </div>\n    </div>\n</body>\n</html>`;\n\nreturn { json: { html: html } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        720
      ],
      "id": "bc091c7f-0d8d-46c9-ac7b-cef86e05ef0c",
      "name": "EDI Data Setup for HTML"
    },
    {
      "parameters": {
        "formTitle": "Healthcare EDI",
        "formFields": {
          "values": [
            {
              "fieldLabel": "X12 EDI 837",
              "fieldType": "file",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -912,
        432
      ],
      "id": "7f9122f8-4a3f-48f0-a712-4159e637965f",
      "name": "On form submission",
      "webhookId": "01820f28-50f9-4e4c-83db-eae0a462ed36"
    },
    {
      "parameters": {
        "operation": "text",
        "binaryPropertyName": "=X12_EDI_837",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -688,
        432
      ],
      "id": "1b1dd730-b379-4f12-a43d-e90336137af7",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "return $json.originalData;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        432
      ],
      "id": "f64d046c-9b0a-47c2-8fd2-cbb765449a40",
      "name": "Extract"
    },
    {
      "parameters": {
        "jsCode": "const validation = $input.first().json.validation;\nconst errorSummary = {\n  timestamp: new Date().toISOString(),\n  fileName: 'X12 EDI 837P',\n  totalErrors: validation.errors.length,\n  totalWarnings: validation.warnings.length,\n  criticalErrors: validation.errors.filter(e => e.severity === 'ERROR'),\n  submitterId: $input.first().json.originalData?.interchangeHeader?.submitterId || 'Unknown'\n};\n\nreturn { json: errorSummary };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        624
      ],
      "id": "bc208608-37d9-42b3-b843-aa6e07438087",
      "name": "Error Report"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4",
          "mode": "list",
          "cachedResultName": "Healthcare EDI",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1615374947,
          "mode": "list",
          "cachedResultName": "Dental",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4/edit#gid=1615374947"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "claimReferenceId",
              "displayName": "claimReferenceId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "claimDate",
              "displayName": "claimDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "submitterName",
              "displayName": "submitterName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billingProviderName",
              "displayName": "billingProviderName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Sender_ID",
              "displayName": "interchange_Sender_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Receiver_ID",
              "displayName": "interchange_Receiver_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Date",
              "displayName": "interchange_Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "transaction_Set_ID",
              "displayName": "transaction_Set_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "submitter_Name",
              "displayName": "submitter_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "receiver_Name",
              "displayName": "receiver_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billing_Provider_Name",
              "displayName": "billing_Provider_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_First_Name",
              "displayName": "patient_First_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_Last_Name",
              "displayName": "patient_Last_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_ID",
              "displayName": "patient_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "payer_Name",
              "displayName": "payer_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_Birthdate",
              "displayName": "patient_Birthdate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_Gender",
              "displayName": "patient_Gender",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "claim_ID",
              "displayName": "claim_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "total_Claim_Charge",
              "displayName": "total_Claim_Charge",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Count",
              "displayName": "service_Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Line_Number",
              "displayName": "service_Line_Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Charge",
              "displayName": "service_Charge",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Date",
              "displayName": "service_Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Units",
              "displayName": "service_Units",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "dental_Procedure_Code",
              "displayName": "dental_Procedure_Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tooth_Number",
              "displayName": "tooth_Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tooth_System_Code",
              "displayName": "tooth_System_Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tooth_Surface",
              "displayName": "tooth_Surface",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "fileName",
              "displayName": "fileName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "totalErrors",
              "displayName": "totalErrors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "totalWarnings",
              "displayName": "totalWarnings",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "criticalErrors",
              "displayName": "criticalErrors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "submitterId",
              "displayName": "submitterId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "33913032-52af-435c-8633-33a6a67a78e0",
      "name": "Document Error",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1120,
        912
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zQDGxhNE1O5PANgU",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('On form submission').item.json['X12 EDI 837'][0].filename }}\n",
                    "rightValue": "X222",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "ae242fb7-2a5b-421a-8ecd-0c41624d5ee6"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Professional"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "16739519-6d19-4b80-b145-0d570e91a00a",
                    "leftValue": "={{ $('On form submission').item.json['X12 EDI 837'][0].filename }}",
                    "rightValue": "X223",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Institutional"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "779fd552-f9d0-49a0-815d-d416e0dcbb03",
                    "leftValue": "={{ $('On form submission').item.json['X12 EDI 837'][0].filename }}",
                    "rightValue": "X224",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Dental"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -240,
        416
      ],
      "id": "5c1a333b-2dd1-439d-90a4-928119b8bdf0",
      "name": "837 Version Check"
    },
    {
      "parameters": {
        "jsCode": "function parseHealthcareEDI(ediMessage) {\n  const result = {\n    interchangeHeader: {},\n    groupHeader: {},\n    transactionSetHeader: {},\n    beginningOfHierarchicalTransaction: {},\n    submitter: {},\n    receiver: {},\n    billingProvider: {},\n    hierarchicalLoops: [],\n    transactionSetTrailer: {},\n    summary: {}\n  };\n\n  const segments = ediMessage.split('~').filter(segment => segment.trim().length > 0);\n  \n  // Loop tracking variables\n  let currentHL = null;\n  let currentLoop2000A = null; // Billing Provider Loop\n  let currentLoop2000B = null; // Subscriber Loop  \n  let currentLoop2000C = null; // Patient Loop\n  let currentLoop2300 = null; // Claim Information Loop\n  let currentLoop2400 = null; // Service Line Loop\n  let currentServiceLine = null;\n  let inLoop1000A = false; // Submitter loop\n  let inLoop1000B = false; // Receiver loop\n  \n  // Track the last entity that received an address (N3) so N4 can attach to it\n  let lastAddressEntity = null;\n  \n  for (const segment of segments) {\n    const elements = segment.trim().split('*');\n    const segmentId = elements[0];\n    \n    switch (segmentId) {\n      // Interchange Control Header\n      case 'ISA':\n        result.interchangeHeader = {\n          authorizationInformationQualifier: elements[1],\n          securityInformationQualifier: elements[3],\n          interchangeIdQualifierOne: elements[5],\n          submitterId: elements[6]?.trim(),\n          interchangeIdQualifierTwo: elements[7],\n          receiverId: elements[8]?.trim(),\n          date: elements[9],\n          time: elements[10],\n          controlVersionNumber: elements[12],\n          controlNumber: elements[13],\n          acknowledgementRequested: elements[14],\n          usageIndicator: elements[15],\n        };\n        break;\n\n      // Function Group Header\n      case 'GS':\n        result.groupHeader = {\n          functionalIdentifierCode: elements[1],\n          applicationSenderCode: elements[2],\n          applicationReceiverCode: elements[3],\n          date: elements[4],\n          time: elements[5],\n          groupControlNumber: elements[6],\n          responsibleAgencyCode: elements[7],\n          versionIdentifierCode: elements[8]\n        };\n        break;\n\n      // Transaction Set Header\n      case 'ST':\n        result.transactionSetHeader = {\n          transactionSetIdentifierCode: elements[1],\n          transactionSetControlNumber: elements[2],\n          implementationConventionReference: elements[3]\n        };\n        break;\n\n      // Beginning of Hierarchical Transaction\n      case 'BHT':\n        result.beginningOfHierarchicalTransaction = {\n          hierarchicalStructureCode: elements[1],\n          transactionSetPurposeCode: elements[2],\n          referenceIdentification: elements[3],\n          date: elements[4],\n          time: elements[5],\n          transactionType: elements[6]\n        };\n        break;\n        \n      // Hierarchical Level\n      case 'HL':\n        currentHL = {\n          hierarchicalId: elements[1],\n          hierarchicalParent: elements[2] || null,\n          hierarchicalLevelCode: elements[3],\n          hierarchicalChildCode: elements[4]\n        };\n        \n        // Reset loop flags and address tracking when entering new HL\n        inLoop1000A = false;\n        inLoop1000B = false;\n        lastAddressEntity = null;\n        \n        switch (elements[3]) {\n          case '20': // Loop 2000A - Billing Provider Hierarchical Level\n            currentHL.description = 'Information Source (Billing Provider)';\n            currentLoop2000A = {\n              ...currentHL,\n              loop: '2000A',\n              billingProvider: {},\n              payToAddress: {},\n              subscribers: [],\n              patients: []\n            };\n            result.hierarchicalLoops.push(currentLoop2000A);\n            currentLoop2000B = null;\n            currentLoop2000C = null;\n            break;\n            \n          case '22': // Loop 2000B - Subscriber Hierarchical Level\n            currentHL.description = 'Subscriber';\n            currentLoop2000B = {\n              ...currentHL,\n              loop: '2000B',\n              subscriber: {},\n              subscriberInfo: {},\n              demographicInfo: {},\n              payer: {},\n              claims: []\n            };\n            if (currentLoop2000A) {\n              currentLoop2000A.subscribers.push(currentLoop2000B);\n            }\n            // Not adding to main hierarchicalLoops\n            currentLoop2000C = null;\n            break;\n            \n          case '23': // Loop 2000C - Patient Hierarchical Level (child of subscriber)\n            currentHL.description = 'Patient';\n            currentLoop2000C = {\n              ...currentHL,\n              loop: '2000C',\n              patient: {},\n              patientInfo: {},\n              demographicInfo: {},\n              claims: []\n            };\n            if (currentLoop2000A) {\n              currentLoop2000A.patients.push(currentLoop2000C);\n            }\n            // Not adding to main hierarchicalLoops\n            break;\n        }\n        break;\n\n      // Provider Information\n      case 'PRV':\n        const providerInfo = {\n          providerCode: elements[1],\n          referenceIdQualifier: elements[2],\n          providerTaxonomyCode: elements[3]\n        };\n        \n        // Assign PRV based on current context\n        if (currentLoop2000A && currentLoop2000A.billingProvider) {\n          currentLoop2000A.billingProvider.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.attendingProvider) {\n          currentLoop2300.attendingProvider.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.operatingPhysician) {\n          currentLoop2300.operatingPhysician.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.otherOperatingPhysician) {\n          currentLoop2300.otherOperatingPhysician.providerInfo = providerInfo;\n        } else if (currentLoop2300) {\n          // If no specific provider context, add to claim level\n          if (!currentLoop2300.providerInfo) {\n            currentLoop2300.providerInfo = [];\n          }\n          currentLoop2300.providerInfo.push(providerInfo);\n        }\n        break;\n\n      case 'NM1':\n        const entityCode = elements[1];\n        const nameInfo = {\n          entityIdCode: elements[1],\n          entityType: elements[2],\n          organizationName: elements[3],\n          firstName: elements[4],\n          middleName: elements[5],\n          lastName: elements[6],\n          nameSuffix: elements[7],\n          idCodeQualifier: elements[8],\n          idCode: elements[9]\n        };\n\n        // Reset address tracking for new entity\n        lastAddressEntity = null;\n\n        switch (entityCode) {\n          // Loop 1000A - Submitter Information\n          case '41':\n            inLoop1000A = true;\n            result.submitter = { \n              entityIdCode: elements[1],\n              entityType: elements[2],\n              submitterName: elements[3],\n              idCodeQualifier: elements[8],\n              submitterId: elements[9]\n            };\n            lastAddressEntity = { type: 'submitter', object: result.submitter };\n            break;\n\n          // Loop 1000B - Receiver Information  \n          case '40':\n            inLoop1000B = true;\n            result.receiver = {               \n              entityIdCode: elements[1],\n              entityType: elements[2],\n              receiverName: elements[3],\n              idCodeQualifier: elements[8],\n              receiverId: elements[9]\n            };\n            lastAddressEntity = { type: 'receiver', object: result.receiver };\n            break;\n\n          // Loop 2010AA - Billing Provider\n          case '85':\n            if (currentLoop2000A) {\n              currentLoop2000A.billingProvider = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                billingProviderName: elements[3],\n                idCodeQualifier: elements[8],\n                billingProviderIdentifier: elements[9]\n              };\n              // Also set at root level for backward compatibility\n              result.billingProvider = currentLoop2000A.billingProvider;\n              lastAddressEntity = { type: 'billingProvider', object: currentLoop2000A.billingProvider };\n            }\n            break;\n\n          // Loop 2010AB - Pay-To Address\n          case '87':\n            if (currentLoop2000A) {\n              currentLoop2000A.payToAddress = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                payToName: elements[3],\n                idCodeQualifier: elements[8],\n                payToId: elements[9]\n              };\n              lastAddressEntity = { type: 'payToAddress', object: currentLoop2000A.payToAddress };\n            }\n            break;\n\n          // Loop 2010BA - Subscriber\n          case 'IL':\n            if (currentLoop2000B) {\n              currentLoop2000B.subscriber = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                memberId: elements[9]\n              };\n              lastAddressEntity = { type: 'subscriber', object: currentLoop2000B.subscriber };\n            }\n            break;\n\n          // Loop 2010BB - Payer\n          case 'PR':\n            if (currentLoop2000B) {\n              currentLoop2000B.payer = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                payerName: elements[3],\n                idCodeQualifier: elements[8],\n                payorID: elements[9]\n              };\n              lastAddressEntity = { type: 'payer', object: currentLoop2000B.payer };\n            }\n            break;\n\n          // Loop 2010CA - Patient Name (when different from subscriber)\n          case 'QC':\n            if (currentLoop2000C) {\n              currentLoop2000C.patient = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                patientId: elements[9]\n              };\n              lastAddressEntity = { type: 'patient', object: currentLoop2000C.patient };\n            }\n            break;\n\n          // Loop 2310A - Attending Provider (DN)\n          case 'DN':\n            if (currentLoop2300) {\n              currentLoop2300.attendingProvider = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                npi: elements[9]\n              };\n              lastAddressEntity = { type: 'attendingProvider', object: currentLoop2300.attendingProvider };\n            }\n            break;\n\n          // Loop 2310B - Operating Physician (82)\n          case '82':\n            if (currentLoop2300) {\n              currentLoop2300.operatingPhysician = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                npi: elements[9]\n              };\n              lastAddressEntity = { type: 'operatingPhysician', object: currentLoop2300.operatingPhysician };\n            }\n            break;\n\n          // Loop 2310C - Other Operating Physician/Service Facility (77)\n          case '77':\n            if (currentLoop2300) {\n              currentLoop2300.otherOperatingPhysician = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                facilityName: elements[3],\n                idCodeQualifier: elements[8],\n                facilityId: elements[9]\n              };\n              lastAddressEntity = { type: 'otherOperatingPhysician', object: currentLoop2300.otherOperatingPhysician };\n            }\n            break;\n        }\n        break;\n\n      // Contact Information\n      case 'PER':\n        const contactInfo = {\n          contactFunctionCode: elements[1],\n          contactName: elements[2],\n          communicationNumberQualifier1: elements[3],\n          communicationNumber1: elements[4],\n          communicationNumberQualifier2: elements[5],\n          communicationNumber2: elements[6],\n          communicationNumberQualifier3: elements[7],\n          communicationNumber3: elements[8]\n        };\n        \n        // Assign contact based on current context\n        if (inLoop1000A && result.submitter) {\n          result.submitter.contact = contactInfo;\n        } else if (inLoop1000B && result.receiver) {\n          result.receiver.contact = contactInfo;\n        } else if (currentLoop2000A && currentLoop2000A.billingProvider && !currentLoop2000A.billingProvider.contact) {\n          currentLoop2000A.billingProvider.contact = contactInfo;\n        }\n        break;\n\n      // Address Information \n      case 'N3':\n        const address = {\n          addressLine1: elements[1],\n          addressLine2: elements[2]\n        };\n        \n        // Use lastAddressEntity to properly assign address\n        if (lastAddressEntity && lastAddressEntity.object) {\n          lastAddressEntity.object.address = address;\n        }\n        break;\n\n      // Geographic Location\n      case 'N4':\n        const location = {\n          city: elements[1],\n          state: elements[2],\n          postalCode: elements[3],\n          countryCode: elements[4]\n        };\n        \n        // Merge with existing address from the same entity\n        if (lastAddressEntity && lastAddressEntity.object && lastAddressEntity.object.address) {\n          lastAddressEntity.object.address = { ...lastAddressEntity.object.address, ...location };\n        } else if (lastAddressEntity && lastAddressEntity.object) {\n          // If N4 comes without N3, still assign location info\n          lastAddressEntity.object.address = location;\n        }\n        break;\n\n      // Demographic Information\n      case 'DMG':\n        const demographicInfo = {\n          dateTimePeriodFormatQualifier: elements[1],\n          birthdate: elements[2],\n          gender: elements[3],\n          maritalStatusCode: elements[4],\n          raceOrEthnicityCode: elements[5]\n        };\n        \n        // Assign to the most specific current loop context\n        // Patient loop takes priority over subscriber loop\n        if (currentLoop2000C) {\n          currentLoop2000C.demographicInfo = demographicInfo;\n        } else if (currentLoop2000B) {\n          currentLoop2000B.demographicInfo = demographicInfo;\n        }\n        break;\n\n      // Subscriber Information\n      case 'SBR':\n        if (currentLoop2000B) {\n          currentLoop2000B.subscriberInfo = {\n            payerResponsibilitySequence: elements[1],\n            individualRelationshipCode: elements[2],\n            groupOrPolicyNumber: elements[3],\n            groupName: elements[4],\n            insuranceTypeCode: elements[5],\n            coordinationOfBenefitsCode: elements[6],\n            yesNoConditionOrResponseCode: elements[7],\n            employmentStatusCode: elements[8],\n            claimFilingIndicatorCode: elements[9]\n          };\n        }\n        break;\n\n      // Patient Information (when patient is different from subscriber)\n      case 'PAT':\n        if (currentLoop2000C) {\n          currentLoop2000C.patientInfo = {\n            individualRelationshipCode: elements[1],\n            patientLocationCode: elements[2],\n            employmentStatusCode: elements[3],\n            studentStatusCode: elements[4],\n            dateTimePeriodFormatQualifier: elements[5],\n            deathDate: elements[6],\n            unitOrBasisForMeasurementCode: elements[7],\n            weight: elements[8],\n            pregnancyIndicator: elements[9]\n          };\n        }\n        break;\n\n      // Loop 2300 - Claim Information\n      case 'CLM':\n        currentLoop2300 = {\n          loop: '2300',\n          claimSubmitterIdentifier: elements[1],\n          totalClaimChargeAmount: elements[2],\n          claimFrequencyCode: elements[5],\n          providerSignatureIndicator: elements[6],\n          assignmentOrPlanParticipationCode: elements[7],\n          benefitsAssignmentCertificationIndicator: elements[8],\n          releaseOfInformationCode: elements[9],\n          diagnosisCodes: [],\n          serviceLines: [],\n          references: []\n        };\n        \n        // Reset address tracking for claim level\n        lastAddressEntity = null;\n        \n        // Add claim to the appropriate loop\n        if (currentLoop2000C) {\n          currentLoop2000C.claims.push(currentLoop2300);\n        } else if (currentLoop2000B) {\n          currentLoop2000B.claims.push(currentLoop2300);\n        }\n        break;\n\n      // Health Care Diagnosis Code\n      case 'HI':\n        if (currentLoop2300) {\n          // Parse diagnosis codes from HI segment\n          for (let i = 1; i < elements.length; i++) {\n            if (elements[i] && elements[i].includes(':')) {\n              const parts = elements[i].split(':');\n              const diagnosisCode = {\n                codeListQualifier: parts[0],\n                diagnosisCode: parts[1]\n              };\n              currentLoop2300.diagnosisCodes.push(diagnosisCode);\n            }\n          }\n        }\n        break;\n\n      // Loop 2400 - Service Line Number\n      case 'LX':\n        currentServiceLine = {\n          loop: '2400',\n          lineNumber: elements[1]\n        };\n        currentLoop2400 = currentServiceLine;\n        break;\n\n      // Professional Service\n      case 'SV1':\n        if (currentServiceLine && currentLoop2300) {\n          const procedureInfo = elements[1];\n          if (procedureInfo && procedureInfo.includes(':')) {\n            const parts = procedureInfo.split(':');\n            currentServiceLine.procedureCode = parts[1];\n            // Handle modifiers if present\n            const modifiers = parts.slice(2);\n            if (modifiers.length > 0) currentServiceLine.procedureCodeModifier1 = modifiers[0];\n            if (modifiers.length > 1) currentServiceLine.procedureCodeModifier2 = modifiers[1];\n            if (modifiers.length > 2) currentServiceLine.procedureCodeModifier3 = modifiers[2];\n            if (modifiers.length > 3) currentServiceLine.procedureCodeModifier4 = modifiers[3];\n          }\n          currentServiceLine.charge = elements[2];\n          currentServiceLine.unitOrBasisOfMeasurement = elements[3];\n          currentServiceLine.units = elements[4];\n          var addr = lastAddressEntity?.object?.address || {};\n          \n          currentServiceLine.placeOfServiceCode =\n            [addr.addressLine1, addr.city, addr.state, addr.postalCode]\n              .filter(Boolean)                  // remove null, undefined, empty strings\n              .map(s => s.replace(/\\n/g, ' ')) // replace newlines with space\n              .join(', ');                      // join with comma and space\n          \n          currentLoop2300.serviceLines.push(currentServiceLine);\n        }\n        break;\n\n      // Date/Time Period\n      case 'DTP':\n        const dateInfo = {\n          dateTimeQualifier: elements[1],\n          dateTimePeriodFormatQualifier: elements[2],\n          dateTimePeriod: elements[3]\n        };\n        \n        if (elements[1] === '472' && currentServiceLine) {\n          // Service Date\n          currentServiceLine.serviceDate = elements[3];\n        } else if (currentLoop2300) {\n          // Other claim-related dates\n          if (!currentLoop2300.dates) {\n            currentLoop2300.dates = [];\n          }\n          currentLoop2300.dates.push(dateInfo);\n        }\n        break;\n\n      // Reference Information\n      case 'REF':\n        const refInfo = {\n          referenceIdQualifier: elements[1],\n          referenceId: elements[2],\n          description: elements[3]\n        };\n        \n        // Assign reference based on current context\n        if (currentLoop2000A && currentLoop2000A.billingProvider) {\n          if (!currentLoop2000A.billingProvider.references) {\n            currentLoop2000A.billingProvider.references = [];\n          }\n          currentLoop2000A.billingProvider.references.push(refInfo);\n        } else if (currentLoop2300) {\n          if (!currentLoop2300.references) {\n            currentLoop2300.references = [];\n          }\n          currentLoop2300.references.push(refInfo);\n        } else if (currentLoop2000B) {\n          if (!currentLoop2000B.references) {\n            currentLoop2000B.references = [];\n          }\n          currentLoop2000B.references.push(refInfo);\n        }\n        break;\n\n      // Group Termination\n      case 'GE':\n        result.groupTrailer = {\n          numberOfTransactionSets: elements[1],\n          groupControlNumber: elements[2]\n        };\n        break;\n\n      // Interchange Control Trailer\n      case 'IEA':\n        result.interchangeTrailer = {\n          numberOfFunctionalGroups: elements[1],\n          interchangeControlNumber: elements[2]\n        };\n        break;\n\n      // Transaction Set Trailer\n      case 'SE':\n        result.transactionSetTrailer = {\n          segmentCount: elements[1],\n          transactionSetControlNumber: elements[2]\n        };\n        break;\n    }\n  }\n    \n  return result;\n}\n\nconst ediMessage = $input.first().json.body;\n\nif (!ediMessage) {\n  throw new Error('No EDI message found in input.');\n}\n\nconst parsedData = parseHealthcareEDI(ediMessage);\nreturn { json: parsedData };"
      },
      "id": "149d1a9f-f43c-4b59-9970-1118129f58af",
      "name": "Parse Healthcare EDI Message (Professional)",
      "type": "n8n-nodes-base.code",
      "position": [
        48,
        256
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "function parseHealthcareEDI(ediMessage) {\n  const result = {\n    interchangeHeader: {},\n    groupHeader: {},\n    transactionSetHeader: {},\n    beginningOfHierarchicalTransaction: {},\n    submitter: {},\n    receiver: {},\n    billingProvider: {},\n    hierarchicalLoops: [],\n    transactionSetTrailer: {},\n    summary: {}\n  };\n\n  const segments = ediMessage.split('~').filter(segment => segment.trim().length > 0);\n  \n  // Loop tracking variables\n  let currentHL = null;\n  let currentLoop2000A = null; // Billing Provider Loop\n  let currentLoop2000B = null; // Subscriber Loop  \n  let currentLoop2000C = null; // Patient Loop\n  let currentLoop2300 = null; // Claim Information Loop\n  let currentLoop2400 = null; // Service Line Loop\n  let currentServiceLine = null;\n  let inLoop1000A = false; // Submitter loop\n  let inLoop1000B = false; // Receiver loop\n  \n  // Track the last entity that received an address (N3) so N4 can attach to it\n  let lastAddressEntity = null;\n  \n  for (const segment of segments) {\n    const elements = segment.trim().split('*');\n    const segmentId = elements[0];\n    \n    switch (segmentId) {\n      // Interchange Control Header\n      case 'ISA':\n        result.interchangeHeader = {\n          authorizationInformationQualifier: elements[1],\n          securityInformationQualifier: elements[3],\n          interchangeIdQualifierOne: elements[5],\n          submitterId: elements[6]?.trim(),\n          interchangeIdQualifierTwo: elements[7],\n          receiverId: elements[8]?.trim(),\n          date: elements[9],\n          time: elements[10],\n          controlVersionNumber: elements[12],\n          controlNumber: elements[13],\n          acknowledgementRequested: elements[14],\n          usageIndicator: elements[15],\n        };\n        break;\n\n      // Function Group Header\n      case 'GS':\n        result.groupHeader = {\n          functionalIdentifierCode: elements[1],\n          applicationSenderCode: elements[2],\n          applicationReceiverCode: elements[3],\n          date: elements[4],\n          time: elements[5],\n          groupControlNumber: elements[6],\n          responsibleAgencyCode: elements[7],\n          versionIdentifierCode: elements[8]\n        };\n        break;\n\n      // Transaction Set Header\n      case 'ST':\n        result.transactionSetHeader = {\n          transactionSetIdentifierCode: elements[1],\n          transactionSetControlNumber: elements[2],\n          implementationConventionReference: elements[3]\n        };\n        break;\n\n      // Beginning of Hierarchical Transaction\n      case 'BHT':\n        result.beginningOfHierarchicalTransaction = {\n          hierarchicalStructureCode: elements[1],\n          transactionSetPurposeCode: elements[2],\n          referenceIdentification: elements[3],\n          date: elements[4],\n          time: elements[5],\n          transactionType: elements[6]\n        };\n        break;\n        \n      // Hierarchical Level\n      case 'HL':\n        currentHL = {\n          hierarchicalId: elements[1],\n          hierarchicalParent: elements[2] || null,\n          hierarchicalLevelCode: elements[3],\n          hierarchicalChildCode: elements[4]\n        };\n        \n        // Reset loop flags and address tracking when entering new HL\n        inLoop1000A = false;\n        inLoop1000B = false;\n        lastAddressEntity = null;\n        \n        switch (elements[3]) {\n          case '20': // Loop 2000A - Billing Provider Hierarchical Level\n            currentHL.description = 'Information Source (Billing Provider)';\n            currentLoop2000A = {\n              ...currentHL,\n              loop: '2000A',\n              billingProvider: {},\n              payToAddress: {},\n              subscribers: [],\n              patients: []\n            };\n            result.hierarchicalLoops.push(currentLoop2000A);\n            currentLoop2000B = null;\n            currentLoop2000C = null;\n            break;\n            \n          case '22': // Loop 2000B - Subscriber Hierarchical Level\n            currentHL.description = 'Subscriber';\n            currentLoop2000B = {\n              ...currentHL,\n              loop: '2000B',\n              subscriber: {},\n              subscriberInfo: {},\n              demographicInfo: {},\n              payer: {},\n              claims: []\n            };\n            if (currentLoop2000A) {\n              currentLoop2000A.subscribers.push(currentLoop2000B);\n            }\n            // Not adding to main hierarchicalLoops\n            currentLoop2000C = null;\n            break;\n            \n          case '23': // Loop 2000C - Patient Hierarchical Level (child of subscriber)\n            currentHL.description = 'Patient';\n            currentLoop2000C = {\n              ...currentHL,\n              loop: '2000C',\n              patient: {},\n              patientInfo: {},\n              demographicInfo: {},\n              claims: []\n            };\n            if (currentLoop2000A) {\n              currentLoop2000A.patients.push(currentLoop2000C);\n            }\n            // Not adding to main hierarchicalLoops\n            break;\n        }\n        break;\n\n      // Provider Information\n      case 'PRV':\n        const providerInfo = {\n          providerCode: elements[1],\n          referenceIdQualifier: elements[2],\n          providerTaxonomyCode: elements[3]\n        };\n        \n        // Assign PRV based on current context\n        if (currentLoop2000A && currentLoop2000A.billingProvider) {\n          currentLoop2000A.billingProvider.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.attendingProvider) {\n          currentLoop2300.attendingProvider.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.operatingPhysician) {\n          currentLoop2300.operatingPhysician.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.otherOperatingPhysician) {\n          currentLoop2300.otherOperatingPhysician.providerInfo = providerInfo;\n        } else if (currentLoop2300) {\n          // If no specific provider context, add to claim level\n          if (!currentLoop2300.providerInfo) {\n            currentLoop2300.providerInfo = [];\n          }\n          currentLoop2300.providerInfo.push(providerInfo);\n        }\n        break;\n\n      case 'NM1':\n        const entityCode = elements[1];\n        const nameInfo = {\n          entityIdCode: elements[1],\n          entityType: elements[2],\n          organizationName: elements[3],\n          firstName: elements[4],\n          middleName: elements[5],\n          lastName: elements[6],\n          nameSuffix: elements[7],\n          idCodeQualifier: elements[8],\n          idCode: elements[9]\n        };\n\n        // Reset address tracking for new entity\n        lastAddressEntity = null;\n\n        switch (entityCode) {\n          // Loop 1000A - Submitter Information\n          case '41':\n            inLoop1000A = true;\n            result.submitter = { \n              entityIdCode: elements[1],\n              entityType: elements[2],\n              submitterName: elements[3],\n              idCodeQualifier: elements[8],\n              submitterId: elements[9]\n            };\n            lastAddressEntity = { type: 'submitter', object: result.submitter };\n            break;\n\n          // Loop 1000B - Receiver Information  \n          case '40':\n            inLoop1000B = true;\n            result.receiver = {               \n              entityIdCode: elements[1],\n              entityType: elements[2],\n              receiverName: elements[3],\n              idCodeQualifier: elements[8],\n              receiverId: elements[9]\n            };\n            lastAddressEntity = { type: 'receiver', object: result.receiver };\n            break;\n\n          // Loop 2010AA - Billing Provider\n          case '85':\n            if (currentLoop2000A) {\n              currentLoop2000A.billingProvider = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                billingProviderName: elements[3],\n                idCodeQualifier: elements[8],\n                billingProviderIdentifier: elements[9]\n              };\n              // Also set at root level for backward compatibility\n              result.billingProvider = currentLoop2000A.billingProvider;\n              lastAddressEntity = { type: 'billingProvider', object: currentLoop2000A.billingProvider };\n            }\n            break;\n\n          // Loop 2010AB - Pay-To Address\n          case '87':\n            if (currentLoop2000A) {\n              currentLoop2000A.payToAddress = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                payToName: elements[3],\n                idCodeQualifier: elements[8],\n                payToId: elements[9]\n              };\n              lastAddressEntity = { type: 'payToAddress', object: currentLoop2000A.payToAddress };\n            }\n            break;\n\n          // Loop 2010BA - Subscriber\n          case 'IL':\n            if (currentLoop2000B) {\n              currentLoop2000B.subscriber = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                memberId: elements[9]\n              };\n              lastAddressEntity = { type: 'subscriber', object: currentLoop2000B.subscriber };\n            }\n            break;\n\n          // Loop 2010BB - Payer\n          case 'PR':\n            if (currentLoop2000B) {\n              currentLoop2000B.payer = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                payerName: elements[3],\n                idCodeQualifier: elements[8],\n                payorID: elements[9]\n              };\n              lastAddressEntity = { type: 'payer', object: currentLoop2000B.payer };\n            }\n            break;\n\n          // Loop 2010CA - Patient Name (when different from subscriber)\n          case 'QC':\n            if (currentLoop2000C) {\n              currentLoop2000C.patient = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                patientId: elements[9]\n              };\n              lastAddressEntity = { type: 'patient', object: currentLoop2000C.patient };\n            }\n            break;\n\n          // Loop 2310A - Attending Provider (DN)\n          case 'DN':\n            if (currentLoop2300) {\n              currentLoop2300.attendingProvider = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                npi: elements[9]\n              };\n              lastAddressEntity = { type: 'attendingProvider', object: currentLoop2300.attendingProvider };\n            }\n            break;\n\n          // Loop 2310B - Operating Physician (82)\n          case '82':\n            if (currentLoop2300) {\n              currentLoop2300.operatingPhysician = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                npi: elements[9]\n              };\n              lastAddressEntity = { type: 'operatingPhysician', object: currentLoop2300.operatingPhysician };\n            }\n            break;\n\n          // Loop 2310C - Other Operating Physician/Service Facility (77)\n          case '77':\n            if (currentLoop2300) {\n              currentLoop2300.otherOperatingPhysician = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                facilityName: elements[3],\n                idCodeQualifier: elements[8],\n                facilityId: elements[9]\n              };\n              lastAddressEntity = { type: 'otherOperatingPhysician', object: currentLoop2300.otherOperatingPhysician };\n            }\n            break;\n        }\n        break;\n\n      // Contact Information\n      case 'PER':\n        const contactInfo = {\n          contactFunctionCode: elements[1],\n          contactName: elements[2],\n          communicationNumberQualifier1: elements[3],\n          communicationNumber1: elements[4],\n          communicationNumberQualifier2: elements[5],\n          communicationNumber2: elements[6],\n          communicationNumberQualifier3: elements[7],\n          communicationNumber3: elements[8]\n        };\n        \n        // Assign contact based on current context\n        if (inLoop1000A && result.submitter) {\n          result.submitter.contact = contactInfo;\n        } else if (inLoop1000B && result.receiver) {\n          result.receiver.contact = contactInfo;\n        } else if (currentLoop2000A && currentLoop2000A.billingProvider && !currentLoop2000A.billingProvider.contact) {\n          currentLoop2000A.billingProvider.contact = contactInfo;\n        }\n        break;\n\n      // Address Information\n      case 'N3':\n        const address = {\n          addressLine1: elements[1],\n          addressLine2: elements[2]\n        };\n        \n        // Use lastAddressEntity to properly assign address\n        if (lastAddressEntity && lastAddressEntity.object) {\n          lastAddressEntity.object.address = address;\n        }\n        break;\n\n      // Geographic Location\n      case 'N4':\n        const location = {\n          city: elements[1],\n          state: elements[2],\n          postalCode: elements[3],\n          countryCode: elements[4]\n        };\n        \n        // Merge with existing address from the same entity\n        if (lastAddressEntity && lastAddressEntity.object && lastAddressEntity.object.address) {\n          lastAddressEntity.object.address = { ...lastAddressEntity.object.address, ...location };\n        } else if (lastAddressEntity && lastAddressEntity.object) {\n          // If N4 comes without N3, still assign location info\n          lastAddressEntity.object.address = location;\n        }\n        break;\n\n      // Demographic Information\n      case 'DMG':\n        const demographicInfo = {\n          dateTimePeriodFormatQualifier: elements[1],\n          birthdate: elements[2],\n          gender: elements[3],\n          maritalStatusCode: elements[4],\n          raceOrEthnicityCode: elements[5]\n        };\n        \n        // Assign to the most specific current loop context\n        // Patient loop takes priority over subscriber loop\n        if (currentLoop2000C) {\n          currentLoop2000C.demographicInfo = demographicInfo;\n        } else if (currentLoop2000B) {\n          currentLoop2000B.demographicInfo = demographicInfo;\n        }\n        break;\n\n      // Subscriber Information\n      case 'SBR':\n        if (currentLoop2000B) {\n          currentLoop2000B.subscriberInfo = {\n            payerResponsibilitySequence: elements[1],\n            individualRelationshipCode: elements[2],\n            groupOrPolicyNumber: elements[3],\n            groupName: elements[4],\n            insuranceTypeCode: elements[5],\n            coordinationOfBenefitsCode: elements[6],\n            yesNoConditionOrResponseCode: elements[7],\n            employmentStatusCode: elements[8],\n            claimFilingIndicatorCode: elements[9]\n          };\n        }\n        break;\n\n      // Patient Information (when patient is different from subscriber)\n      case 'PAT':\n        if (currentLoop2000C) {\n          currentLoop2000C.patientInfo = {\n            individualRelationshipCode: elements[1],\n            patientLocationCode: elements[2],\n            employmentStatusCode: elements[3],\n            studentStatusCode: elements[4],\n            dateTimePeriodFormatQualifier: elements[5],\n            deathDate: elements[6],\n            unitOrBasisForMeasurementCode: elements[7],\n            weight: elements[8],\n            pregnancyIndicator: elements[9]\n          };\n        }\n        break;\n\n      // Loop 2300 - Claim Information\n      case 'CLM':\n        currentLoop2300 = {\n          loop: '2300',\n          claimSubmitterIdentifier: elements[1],\n          totalClaimChargeAmount: elements[2],\n          claimFrequencyCode: elements[5],\n          providerSignatureIndicator: elements[6],\n          assignmentOrPlanParticipationCode: elements[7],\n          benefitsAssignmentCertificationIndicator: elements[8],\n          releaseOfInformationCode: elements[9],\n          diagnosisCodes: [],\n          serviceLines: [],\n          references: []\n        };\n        \n        // Reset address tracking for claim level\n        lastAddressEntity = null;\n        \n        // Add claim to the appropriate loop\n        if (currentLoop2000C) {\n          currentLoop2000C.claims.push(currentLoop2300);\n        } else if (currentLoop2000B) {\n          currentLoop2000B.claims.push(currentLoop2300);\n        }\n        break;\n\n      // Health Care Diagnosis Code\n      case 'HI':\n        if (currentLoop2300) {\n          // Parse diagnosis codes from HI segment\n          for (let i = 1; i < elements.length; i++) {\n            if (elements[i] && elements[i].includes(':')) {\n              const parts = elements[i].split(':');\n              const diagnosisCode = {\n                codeListQualifier: parts[0],\n                diagnosisCode: parts[1]\n              };\n              currentLoop2300.diagnosisCodes.push(diagnosisCode);\n            }\n          }\n        }\n        break;\n\n      // Loop 2400 - Service Line Number\n      case 'LX':\n        currentServiceLine = {\n          loop: '2400',\n          lineNumber: elements[1]\n        };\n        currentLoop2400 = currentServiceLine;\n        break;\n\n      // Professional Service\n      case 'SV2':\n        if (currentServiceLine && currentLoop2300) {\n          const revenueCode = elements[1]; // First element is revenue code\n          const procedureInfo = elements[2]; // Second element contains HCPCS info\n          \n          currentServiceLine.segment = 'SV2'; // Flag as institutional\n          currentServiceLine.revenueCode = revenueCode;\n          \n          // Parse HCPCS code if present\n          if (procedureInfo && procedureInfo.includes(':')) {\n            const parts = procedureInfo.split(':');\n            currentServiceLine.procedureCode = parts[1];\n          }\n          \n          currentServiceLine.charge = elements[3];\n          currentServiceLine.unitOrBasisOfMeasurement = elements[4];\n          currentServiceLine.units = elements[5];\n          \n          currentLoop2300.serviceLines.push(currentServiceLine);\n        }\n        break;\n\n      // Date/Time Period\n      case 'DTP':\n        const dateInfo = {\n          dateTimeQualifier: elements[1],\n          dateTimePeriodFormatQualifier: elements[2],\n          dateTimePeriod: elements[3]\n        };\n        \n        if (elements[1] === '472' && currentServiceLine) {\n          // Service Date\n          currentServiceLine.serviceDate = elements[3];\n        } else if (currentLoop2300) {\n          // Other claim-related dates\n          if (!currentLoop2300.dates) {\n            currentLoop2300.dates = [];\n          }\n          currentLoop2300.dates.push(dateInfo);\n        }\n        break;\n\n      // Reference Information\n      case 'REF':\n        const refInfo = {\n          referenceIdQualifier: elements[1],\n          referenceId: elements[2],\n          description: elements[3]\n        };\n        \n        // Assign reference based on current context\n        if (currentLoop2000A && currentLoop2000A.billingProvider) {\n          if (!currentLoop2000A.billingProvider.references) {\n            currentLoop2000A.billingProvider.references = [];\n          }\n          currentLoop2000A.billingProvider.references.push(refInfo);\n        } else if (currentLoop2300) {\n          if (!currentLoop2300.references) {\n            currentLoop2300.references = [];\n          }\n          currentLoop2300.references.push(refInfo);\n        } else if (currentLoop2000B) {\n          if (!currentLoop2000B.references) {\n            currentLoop2000B.references = [];\n          }\n          currentLoop2000B.references.push(refInfo);\n        }\n        break;\n\n      // Group Termination\n      case 'GE':\n        result.groupTrailer = {\n          numberOfTransactionSets: elements[1],\n          groupControlNumber: elements[2]\n        };\n        break;\n\n      // Interchange Control Trailer\n      case 'IEA':\n        result.interchangeTrailer = {\n          numberOfFunctionalGroups: elements[1],\n          interchangeControlNumber: elements[2]\n        };\n        break;\n\n      // Transaction Set Trailer\n      case 'SE':\n        result.transactionSetTrailer = {\n          segmentCount: elements[1],\n          transactionSetControlNumber: elements[2]\n        };\n        break;\n    }\n  }\n  \n  return result;\n}\n\nconst ediMessage = $input.first().json.body;\n\nif (!ediMessage) {\n  throw new Error('No EDI message found in input.');\n}\n\nconst parsedData = parseHealthcareEDI(ediMessage);\nreturn { json: parsedData };"
      },
      "id": "ef197180-25b9-48e3-a2ab-1d4dbc39d717",
      "name": "Parse Healthcare EDI Message (Institutional)",
      "type": "n8n-nodes-base.code",
      "position": [
        48,
        432
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "function parseHealthcareEDI(ediMessage) {\n  const result = {\n    interchangeHeader: {},\n    groupHeader: {},\n    transactionSetHeader: {},\n    beginningOfHierarchicalTransaction: {},\n    submitter: {},\n    receiver: {},\n    billingProvider: {},\n    hierarchicalLoops: [],\n    transactionSetTrailer: {},\n    summary: {}\n  };\n\n  const segments = ediMessage.split('~').filter(segment => segment.trim().length > 0);\n  \n  // Loop tracking variables\n  let currentHL = null;\n  let currentLoop2000A = null; // Billing Provider Loop\n  let currentLoop2000B = null; // Subscriber Loop  \n  let currentLoop2000C = null; // Patient Loop\n  let currentLoop2300 = null; // Claim Information Loop\n  let currentLoop2400 = null; // Service Line Loop\n  let currentServiceLine = null;\n  let inLoop1000A = false; // Submitter loop\n  let inLoop1000B = false; // Receiver loop\n  \n  // Track the last entity that received an address (N3) so N4 can attach to it\n  let lastAddressEntity = null;\n  \n  for (const segment of segments) {\n    const elements = segment.trim().split('*');\n    const segmentId = elements[0];\n    \n    switch (segmentId) {\n      // Interchange Control Header\n      case 'ISA':\n        result.interchangeHeader = {\n          authorizationInformationQualifier: elements[1],\n          securityInformationQualifier: elements[3],\n          interchangeIdQualifierOne: elements[5],\n          submitterId: elements[6]?.trim(),\n          interchangeIdQualifierTwo: elements[7],\n          receiverId: elements[8]?.trim(),\n          date: elements[9],\n          time: elements[10],\n          controlVersionNumber: elements[12],\n          controlNumber: elements[13],\n          acknowledgementRequested: elements[14],\n          usageIndicator: elements[15],\n        };\n        break;\n\n      // Function Group Header\n      case 'GS':\n        result.groupHeader = {\n          functionalIdentifierCode: elements[1],\n          applicationSenderCode: elements[2],\n          applicationReceiverCode: elements[3],\n          date: elements[4],\n          time: elements[5],\n          groupControlNumber: elements[6],\n          responsibleAgencyCode: elements[7],\n          versionIdentifierCode: elements[8]\n        };\n        break;\n\n      // Transaction Set Header\n      case 'ST':\n        result.transactionSetHeader = {\n          transactionSetIdentifierCode: elements[1],\n          transactionSetControlNumber: elements[2],\n          implementationConventionReference: elements[3]\n        };\n        break;\n\n      // Beginning of Hierarchical Transaction\n      case 'BHT':\n        result.beginningOfHierarchicalTransaction = {\n          hierarchicalStructureCode: elements[1],\n          transactionSetPurposeCode: elements[2],\n          referenceIdentification: elements[3],\n          date: elements[4],\n          time: elements[5],\n          transactionType: elements[6]\n        };\n        break;\n        \n      // Hierarchical Level\n      case 'HL':\n        currentHL = {\n          hierarchicalId: elements[1],\n          hierarchicalParent: elements[2] || null,\n          hierarchicalLevelCode: elements[3],\n          hierarchicalChildCode: elements[4]\n        };\n        \n        // Reset loop flags and address tracking when entering new HL\n        inLoop1000A = false;\n        inLoop1000B = false;\n        lastAddressEntity = null;\n        \n        switch (elements[3]) {\n          case '20': // Loop 2000A - Billing Provider Hierarchical Level\n            currentHL.description = 'Information Source (Billing Provider)';\n            currentLoop2000A = {\n              ...currentHL,\n              loop: '2000A',\n              billingProvider: {},\n              payToAddress: {},\n              subscribers: [],\n              patients: []\n            };\n            result.hierarchicalLoops.push(currentLoop2000A);\n            currentLoop2000B = null;\n            currentLoop2000C = null;\n            break;\n            \n          case '22': // Loop 2000B - Subscriber Hierarchical Level\n            currentHL.description = 'Subscriber';\n            currentLoop2000B = {\n              ...currentHL,\n              loop: '2000B',\n              subscriber: {},\n              subscriberInfo: {},\n              demographicInfo: {},\n              payer: {},\n              claims: []\n            };\n            if (currentLoop2000A) {\n              currentLoop2000A.subscribers.push(currentLoop2000B);\n            }\n            // Not adding to main hierarchicalLoops\n            currentLoop2000C = null;\n            break;\n            \n          case '23': // Loop 2000C - Patient Hierarchical Level (child of subscriber)\n            currentHL.description = 'Patient';\n            currentLoop2000C = {\n              ...currentHL,\n              loop: '2000C',\n              patient: {},\n              patientInfo: {},\n              demographicInfo: {},\n              claims: []\n            };\n            if (currentLoop2000A) {\n              currentLoop2000A.patients.push(currentLoop2000C);\n            }\n            // Not adding to main hierarchicalLoops\n            break;\n        }\n        break;\n\n      // Provider Information\n      case 'PRV':\n        const providerInfo = {\n          providerCode: elements[1],\n          referenceIdQualifier: elements[2],\n          providerTaxonomyCode: elements[3]\n        };\n        \n        // Assign PRV based on current context\n        if (currentLoop2000A && currentLoop2000A.billingProvider) {\n          currentLoop2000A.billingProvider.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.attendingProvider) {\n          currentLoop2300.attendingProvider.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.operatingPhysician) {\n          currentLoop2300.operatingPhysician.providerInfo = providerInfo;\n        } else if (currentLoop2300 && currentLoop2300.otherOperatingPhysician) {\n          currentLoop2300.otherOperatingPhysician.providerInfo = providerInfo;\n        } else if (currentLoop2300) {\n          // If no specific provider context, add to claim level\n          if (!currentLoop2300.providerInfo) {\n            currentLoop2300.providerInfo = [];\n          }\n          currentLoop2300.providerInfo.push(providerInfo);\n        }\n        break;\n\n      case 'NM1':\n        const entityCode = elements[1];\n        const nameInfo = {\n          entityIdCode: elements[1],\n          entityType: elements[2],\n          organizationName: elements[3],\n          firstName: elements[4],\n          middleName: elements[5],\n          lastName: elements[6],\n          nameSuffix: elements[7],\n          idCodeQualifier: elements[8],\n          idCode: elements[9]\n        };\n\n        // Reset address tracking for new entity\n        lastAddressEntity = null;\n\n        switch (entityCode) {\n          // Loop 1000A - Submitter Information\n          case '41':\n            inLoop1000A = true;\n            result.submitter = { \n              entityIdCode: elements[1],\n              entityType: elements[2],\n              submitterName: elements[3],\n              idCodeQualifier: elements[8],\n              submitterId: elements[9]\n            };\n            lastAddressEntity = { type: 'submitter', object: result.submitter };\n            break;\n\n          // Loop 1000B - Receiver Information  \n          case '40':\n            inLoop1000B = true;\n            result.receiver = {               \n              entityIdCode: elements[1],\n              entityType: elements[2],\n              receiverName: elements[3],\n              idCodeQualifier: elements[8],\n              receiverId: elements[9]\n            };\n            lastAddressEntity = { type: 'receiver', object: result.receiver };\n            break;\n\n          // Loop 2010AA - Billing Provider\n          case '85':\n            if (currentLoop2000A) {\n              currentLoop2000A.billingProvider = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                billingProviderName: elements[3],\n                idCodeQualifier: elements[8],\n                billingProviderIdentifier: elements[9]\n              };\n              // Also set at root level for backward compatibility\n              result.billingProvider = currentLoop2000A.billingProvider;\n              lastAddressEntity = { type: 'billingProvider', object: currentLoop2000A.billingProvider };\n            }\n            break;\n\n          // Loop 2010AB - Pay-To Address\n          case '87':\n            if (currentLoop2000A) {\n              currentLoop2000A.payToAddress = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                payToName: elements[3],\n                idCodeQualifier: elements[8],\n                payToId: elements[9]\n              };\n              lastAddressEntity = { type: 'payToAddress', object: currentLoop2000A.payToAddress };\n            }\n            break;\n\n          // Loop 2010BA - Subscriber\n          case 'IL':\n            if (currentLoop2000B) {\n              currentLoop2000B.subscriber = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                memberId: elements[9]\n              };\n              lastAddressEntity = { type: 'subscriber', object: currentLoop2000B.subscriber };\n            }\n            break;\n\n          // Loop 2010BB - Payer\n          case 'PR':\n            if (currentLoop2000B) {\n              currentLoop2000B.payer = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                payerName: elements[3],\n                idCodeQualifier: elements[8],\n                payorID: elements[9]\n              };\n              lastAddressEntity = { type: 'payer', object: currentLoop2000B.payer };\n            }\n            break;\n\n          // Loop 2010CA - Patient Name (when different from subscriber)\n          case 'QC':\n            if (currentLoop2000C) {\n              currentLoop2000C.patient = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                patientId: elements[9]\n              };\n              lastAddressEntity = { type: 'patient', object: currentLoop2000C.patient };\n            }\n            break;\n\n          // Loop 2310A - Attending Provider (DN)\n          case 'DN':\n            if (currentLoop2300) {\n              currentLoop2300.attendingProvider = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                npi: elements[9]\n              };\n              lastAddressEntity = { type: 'attendingProvider', object: currentLoop2300.attendingProvider };\n            }\n            break;\n\n          // Loop 2310B - Operating Physician (82)\n          case '82':\n            if (currentLoop2300) {\n              currentLoop2300.operatingPhysician = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                lastName: elements[3],\n                firstName: elements[4],\n                middleName: elements[5],\n                idCodeQualifier: elements[8],\n                npi: elements[9]\n              };\n              lastAddressEntity = { type: 'operatingPhysician', object: currentLoop2300.operatingPhysician };\n            }\n            break;\n\n          // Loop 2310C - Other Operating Physician/Service Facility (77)\n          case '77':\n            if (currentLoop2300) {\n              currentLoop2300.otherOperatingPhysician = {               \n                entityIdCode: elements[1],\n                entityType: elements[2],\n                facilityName: elements[3],\n                idCodeQualifier: elements[8],\n                facilityId: elements[9]\n              };\n              lastAddressEntity = { type: 'otherOperatingPhysician', object: currentLoop2300.otherOperatingPhysician };\n            }\n            break;\n        }\n        break;\n\n      // Contact Information\n      case 'PER':\n        const contactInfo = {\n          contactFunctionCode: elements[1],\n          contactName: elements[2],\n          communicationNumberQualifier1: elements[3],\n          communicationNumber1: elements[4],\n          communicationNumberQualifier2: elements[5],\n          communicationNumber2: elements[6],\n          communicationNumberQualifier3: elements[7],\n          communicationNumber3: elements[8]\n        };\n        \n        // Assign contact based on current context\n        if (inLoop1000A && result.submitter) {\n          result.submitter.contact = contactInfo;\n        } else if (inLoop1000B && result.receiver) {\n          result.receiver.contact = contactInfo;\n        } else if (currentLoop2000A && currentLoop2000A.billingProvider && !currentLoop2000A.billingProvider.contact) {\n          currentLoop2000A.billingProvider.contact = contactInfo;\n        }\n        break;\n\n      // Address Information\n      case 'N3':\n        const address = {\n          addressLine1: elements[1],\n          addressLine2: elements[2]\n        };\n        \n        // Use lastAddressEntity to properly assign address\n        if (lastAddressEntity && lastAddressEntity.object) {\n          lastAddressEntity.object.address = address;\n        }\n        break;\n\n      // Geographic Location\n      case 'N4':\n        const location = {\n          city: elements[1],\n          state: elements[2],\n          postalCode: elements[3],\n          countryCode: elements[4]\n        };\n        \n        // Merge with existing address from the same entity\n        if (lastAddressEntity && lastAddressEntity.object && lastAddressEntity.object.address) {\n          lastAddressEntity.object.address = { ...lastAddressEntity.object.address, ...location };\n        } else if (lastAddressEntity && lastAddressEntity.object) {\n          // If N4 comes without N3, still assign location info\n          lastAddressEntity.object.address = location;\n        }\n        break;\n\n      // Demographic Information\n      case 'DMG':\n        const demographicInfo = {\n          dateTimePeriodFormatQualifier: elements[1],\n          birthdate: elements[2],\n          gender: elements[3],\n          maritalStatusCode: elements[4],\n          raceOrEthnicityCode: elements[5]\n        };\n        \n        // Assign to the most specific current loop context\n        // Patient loop takes priority over subscriber loop\n        if (currentLoop2000C) {\n          currentLoop2000C.demographicInfo = demographicInfo;\n        } else if (currentLoop2000B) {\n          currentLoop2000B.demographicInfo = demographicInfo;\n        }\n        break;\n\n      // Subscriber Information\n      case 'SBR':\n        if (currentLoop2000B) {\n          currentLoop2000B.subscriberInfo = {\n            payerResponsibilitySequence: elements[1],\n            individualRelationshipCode: elements[2],\n            groupOrPolicyNumber: elements[3],\n            groupName: elements[4],\n            insuranceTypeCode: elements[5],\n            coordinationOfBenefitsCode: elements[6],\n            yesNoConditionOrResponseCode: elements[7],\n            employmentStatusCode: elements[8],\n            claimFilingIndicatorCode: elements[9]\n          };\n        }\n        break;\n\n      // Patient Information (when patient is different from subscriber)\n      case 'PAT':\n        if (currentLoop2000C) {\n          currentLoop2000C.patientInfo = {\n            individualRelationshipCode: elements[1],\n            patientLocationCode: elements[2],\n            employmentStatusCode: elements[3],\n            studentStatusCode: elements[4],\n            dateTimePeriodFormatQualifier: elements[5],\n            deathDate: elements[6],\n            unitOrBasisForMeasurementCode: elements[7],\n            weight: elements[8],\n            pregnancyIndicator: elements[9]\n          };\n        }\n        break;\n\n      // Loop 2300 - Claim Information\n      case 'CLM':\n        currentLoop2300 = {\n          loop: '2300',\n          claimSubmitterIdentifier: elements[1],\n          totalClaimChargeAmount: elements[2],\n          claimFrequencyCode: elements[5],\n          providerSignatureIndicator: elements[6],\n          assignmentOrPlanParticipationCode: elements[7],\n          benefitsAssignmentCertificationIndicator: elements[8],\n          releaseOfInformationCode: elements[9],\n          diagnosisCodes: [],\n          serviceLines: [],\n          references: []\n        };\n        \n        // Reset address tracking for claim level\n        lastAddressEntity = null;\n        \n        // Add claim to the appropriate loop\n        if (currentLoop2000C) {\n          currentLoop2000C.claims.push(currentLoop2300);\n        } else if (currentLoop2000B) {\n          currentLoop2000B.claims.push(currentLoop2300);\n        }\n        break;\n\n      // Health Care Diagnosis Code\n      case 'HI':\n        if (currentLoop2300) {\n          // Parse diagnosis codes from HI segment\n          for (let i = 1; i < elements.length; i++) {\n            if (elements[i] && elements[i].includes(':')) {\n              const parts = elements[i].split(':');\n              const diagnosisCode = {\n                codeListQualifier: parts[0],\n                diagnosisCode: parts[1]\n              };\n              currentLoop2300.diagnosisCodes.push(diagnosisCode);\n            }\n          }\n        }\n        break;\n\n      // Loop 2400 - Service Line Number\n      case 'LX':\n        currentServiceLine = {\n          loop: '2400',\n          lineNumber: elements[1]\n        };\n        currentLoop2400 = currentServiceLine;\n        break;\n\n\n      // Professional Service for Dental (SV3)\n      case 'SV3':\n        if (currentServiceLine && currentLoop2300) {\n          const procedureInfo = elements[1];\n          if (procedureInfo && procedureInfo.includes(':')) {\n            const parts = procedureInfo.split(':');\n            currentServiceLine.dentalProcedureCode = parts[1];\n          } else {\n            currentServiceLine.dentalProcedureCode = procedureInfo;\n          }\n          \n          currentServiceLine.segment = 'SV3'; // Flag as dental\n          currentServiceLine.charge = elements[2];\n          currentServiceLine.placeOfServiceCode = elements[3];\n          currentServiceLine.units = elements[7];\n          \n          currentLoop2300.serviceLines.push(currentServiceLine);\n        }\n        break;\n      \n      // Tooth Information (TOO)\n      case 'TOO':\n        if (currentServiceLine) {\n          const toothSystemCode = elements[1]; // JP = Universal numbering system\n          const toothNumber = elements[2];\n          const toothSurface = elements[3];\n          \n          currentServiceLine.toothInfo = {\n            toothSystemCode: toothSystemCode,\n            toothNumber: toothNumber,\n            toothSurface: toothSurface\n          };\n        }\n        break;\n\n      // Date/Time Period\n      case 'DTP':\n        const dateInfo = {\n          dateTimeQualifier: elements[1],\n          dateTimePeriodFormatQualifier: elements[2],\n          dateTimePeriod: elements[3]\n        };\n        \n        if (elements[1] === '472' && currentServiceLine) {\n          // Service Date\n          currentServiceLine.serviceDate = elements[3];\n        } else if (currentLoop2300) {\n          // Other claim-related dates\n          if (!currentLoop2300.dates) {\n            currentLoop2300.dates = [];\n          }\n          currentLoop2300.dates.push(dateInfo);\n        }\n        break;\n\n      // Reference Information\n      case 'REF':\n        const refInfo = {\n          referenceIdQualifier: elements[1],\n          referenceId: elements[2],\n          description: elements[3]\n        };\n        \n        // Assign reference based on current context\n        if (currentLoop2000A && currentLoop2000A.billingProvider) {\n          if (!currentLoop2000A.billingProvider.references) {\n            currentLoop2000A.billingProvider.references = [];\n          }\n          currentLoop2000A.billingProvider.references.push(refInfo);\n        } else if (currentLoop2300) {\n          if (!currentLoop2300.references) {\n            currentLoop2300.references = [];\n          }\n          currentLoop2300.references.push(refInfo);\n        } else if (currentLoop2000B) {\n          if (!currentLoop2000B.references) {\n            currentLoop2000B.references = [];\n          }\n          currentLoop2000B.references.push(refInfo);\n        }\n        break;\n\n      // Group Termination\n      case 'GE':\n        result.groupTrailer = {\n          numberOfTransactionSets: elements[1],\n          groupControlNumber: elements[2]\n        };\n        break;\n\n      // Interchange Control Trailer\n      case 'IEA':\n        result.interchangeTrailer = {\n          numberOfFunctionalGroups: elements[1],\n          interchangeControlNumber: elements[2]\n        };\n        break;\n\n      // Transaction Set Trailer\n      case 'SE':\n        result.transactionSetTrailer = {\n          segmentCount: elements[1],\n          transactionSetControlNumber: elements[2]\n        };\n        break;\n    }\n  }\n  \n  return result;\n}\n\nconst ediMessage = $input.first().json.body;\n\nif (!ediMessage) {\n  throw new Error('No EDI message found in input.');\n}\n\nconst parsedData = parseHealthcareEDI(ediMessage);\nreturn { json: parsedData };"
      },
      "id": "0c80d76e-1e14-44b1-94c1-bfe263f4c128",
      "name": "Parse Healthcare EDI Message (Dental)",
      "type": "n8n-nodes-base.code",
      "position": [
        32,
        1200
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "function validateHealthcareEDI(parsedEDI) {\n  const validationResults = {\n    isValid: true,\n    errors: [],\n    warnings: [],\n    summary: {\n      totalClaims: 0,\n      validClaims: 0,\n      errorCount: 0,\n      warningCount: 0\n    }\n  };\n\n  // Helper function to add error\n  function addError(category, field, value, message) {\n    validationResults.errors.push({\n      category,\n      field,\n      value: value || 'N/A',\n      message,\n      severity: 'ERROR'\n    });\n    validationResults.isValid = false;\n  }\n\n  // Helper function to add warning\n  function addWarning(category, field, value, message) {\n    validationResults.warnings.push({\n      category,\n      field,\n      value: value || 'N/A',\n      message,\n      severity: 'WARNING'\n    });\n  }\n\n  // 1. STRUCTURAL VALIDATION\n  try {\n    // Check required top-level objects\n    const requiredObjects = ['interchangeHeader', 'groupHeader', 'transactionSetHeader', 'beginningOfHierarchicalTransaction', 'submitter', 'receiver', 'billingProvider', 'hierarchicalLoops', 'transactionSetTrailer', 'groupTrailer', 'interchangeTrailer'];\n    for (const obj of requiredObjects) {\n      if (!parsedEDI[obj]) {\n        addError('STRUCTURE', obj, null, `Missing required object: ${obj}`);\n      }\n    }\n\n    // Validate interchange header\n    if (parsedEDI.interchangeHeader) {\n      const ih = parsedEDI.interchangeHeader;\n\n      let controlNumberCheck = true;\n      let interchangeControlNumberCheck = true;\n\n      if (!ih.authorizationInformationQualifier || ih.authorizationInformationQualifier.length === 0) {\n        addError('INTERCHANGE', 'authorizationInformationQualifier', ih.authorizationInformationQualifier, 'Authorization Information Qualifier is required');\n      } else if (ih.authorizationInformationQualifier != '00') {\n        addError('INTERCHANGE', 'authorizationInformationQualifier', ih.authorizationInformationQualifier, 'Authorization Information Qualifier expected value 00');\n      }\n\n      if (!ih.securityInformationQualifier || ih.securityInformationQualifier.length === 0) {\n        addError('INTERCHANGE', 'securityInformationQualifier', ih.securityInformationQualifier, 'Security Information Qualifier is required');\n      } else if (ih.securityInformationQualifier != '00') {\n        addError('INTERCHANGE', 'securityInformationQualifier', ih.securityInformationQualifier, 'Security Information Qualifier expected value 00');\n      }\n\n      if (!ih.interchangeIdQualifierOne || ih.interchangeIdQualifierOne.length === 0) {\n        addError('INTERCHANGE', 'interchangeIdQualifierOne', ih.interchangeIdQualifierOne, 'Interchange ID Qualifier One is required');\n      } else if (ih.interchangeIdQualifierOne != 'ZZ') {\n        addError('INTERCHANGE', 'interchangeIdQualifierOne', ih.interchangeIdQualifierOne, 'Interchange ID Qualifier One expected value ZZ');\n      }\n      \n      if (!ih.submitterId || ih.submitterId.length === 0) {\n        addError('INTERCHANGE', 'submitterId', ih.submitterId, 'Submitter ID is required');\n      }\n\n      if (!ih.interchangeIdQualifierTwo || ih.interchangeIdQualifierTwo.length === 0) {\n        addError('INTERCHANGE', 'interchangeIdQualifierTwo', ih.interchangeIdQualifierTwo, 'Interchange ID Qualifier Two is required');\n      } else if (ih.interchangeIdQualifierTwo != 'ZZ') {\n        addError('INTERCHANGE', 'interchangeIdQualifierTwo', ih.interchangeIdQualifierTwo, 'Interchange ID Qualifier Two expected value ZZ');\n      }\n      \n      if (!ih.receiverId || ih.receiverId.length === 0) {\n        addError('INTERCHANGE', 'receiverId', ih.receiverId, 'Receiver ID is required');\n      }\n      \n      if (!ih.date || !/^\\d{6}$/.test(ih.date)) {\n        addError('INTERCHANGE', 'date', ih.date, 'Date must be YYMMDD format');\n      }\n\n      if (!ih.controlNumber || ih.controlNumber.length === 0) {\n        addError('INTERCHANGE', 'controlNumber', ih.controlNumber, 'Control Number is required');\n        controlNumberCheck = false;\n      }\n\n      if (parsedEDI.interchangeTrailer) {\n        const it = parsedEDI.interchangeTrailer;\n\n        if (!it.interchangeControlNumber || it.interchangeControlNumber.length === 0) {\n          addError('INTERCHANGE', 'interchangeControlNumber', it.interchangeControlNumber, 'Interchange Control Number is required');\n          interchangeControlNumberCheck = false;\n        }\n\n        if (controlNumberCheck && interchangeControlNumberCheck) {\n          if (controlNumberCheck != interchangeControlNumberCheck) {\n            addError('INTERCHANGE', 'Header & Trailer Control Number', ih.controlNumber + ' / ' + it.interchangeControlNumber, 'Header and Trailer Control Numbers do not match!');\n          }\n        }\n        \n      }\n\n      if (!ih.acknowledgementRequested || ih.acknowledgementRequested.length === 0) {\n        addError('INTERCHANGE', 'acknowledgementRequested', ih.acknowledgementRequested, 'Acknowledgement Requested is required');\n      } else if (ih.acknowledgementRequested == 0) {\n        addWarning('INTERCHANGE', 'acknowledgementRequested', ih.acknowledgementRequested, 'No acknowledgement requested');\n      }\n      \n      if (ih.usageIndicator && !['T', 'P'].includes(ih.usageIndicator)) {\n        addWarning('INTERCHANGE', 'usageIndicator', ih.usageIndicator, 'Usage indicator should be T (test) or P (production)');\n      }\n    }\n\n    // Validate Functional Group Header\n    if (parsedEDI.groupHeader) {\n      const gh = parsedEDI.groupHeader;\n      \n      if (gh.versionIdentifierCode !== '005010X222A1') {\n        addError('GROUP HEADER', 'versionIdentifierCode', gh.versionIdentifierCode, 'Version Identifier Code expected value 005010X222A1');\n      }\n  \n    }\n\n    // Validate transaction set header\n    if (parsedEDI.transactionSetHeader) {\n      const tsh = parsedEDI.transactionSetHeader;\n      \n      if (tsh.implementationConventionReference !== '005010X222A1') {\n        addError('TRANSACTION', 'implementationConventionReference', tsh.implementationConventionReference, 'Implementation Convention Reference expected value 005010X222A1');\n      }\n    }\n\n    // Validate Beginning of Hierarchical Transaction\n    if (parsedEDI.beginningOfHierarchicalTransaction) {\n      const bht = parsedEDI.beginningOfHierarchicalTransaction;\n\n      if (!bht.transactionSetPurposeCode || bht.transactionSetPurposeCode.length === 0) {\n        addError('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionSetPurposeCode', bht.transactionSetPurposeCode, 'Transaction Set Purpose Code is required');\n      } else if (bht.transactionSetPurposeCode != '00') {\n        addWarning('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionSetPurposeCode', bht.transactionSetPurposeCode, 'Transaction Set Purpose Code expected value 00');\n      }\n\n      if (!bht.transactionType || bht.transactionType.length === 0) {\n        addError('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionType', bht.transactionType, 'Transaction Type is required');\n      } else if (bht.transactionType != 'CH') {\n        addWarning('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionType', bht.transactionType, 'Transaction Type expected value CH');\n      }\n      \n    }\n\n  } catch (error) {\n    addError('STRUCTURE', 'parsing', null, `Failed to validate structure: ${error.message}`);\n  }\n\n  // 2. BUSINESS RULE VALIDATION\n  try {\n    // Validate billing provider\n    if (parsedEDI.billingProvider) {\n      const bp = parsedEDI.billingProvider;\n      \n      // NPI validation (must be 10 digits)\n      if (!bp.billingProviderIdentifier || !/^\\d{10}$/.test(bp.billingProviderIdentifier)) {\n        addError('PROVIDER', 'billingProviderIdentifier', bp.billingProviderIdentifier, 'Billing provider NPI must be exactly 10 digits');\n      }\n      \n      if (!bp.billingProviderName || bp.billingProviderName.trim().length === 0) {\n        addError('PROVIDER', 'billingProviderName', bp.billingProviderName, 'Billing provider name is required');\n      }\n\n      // Address validation\n      if (bp.address) {\n        if (!bp.address.addressLine1 || bp.address.addressLine1.trim().length === 0) {\n          addWarning('PROVIDER', 'address.addressLine1', bp.address.addressLine1, 'Provider address line 1 should not be empty');\n        }\n        \n        if (!bp.address.city || bp.address.city.trim().length === 0) {\n          addError('PROVIDER', 'address.city', bp.address.city, 'Provider city is required');\n        }\n        \n        if (!bp.address.state || !/^[A-Z]{2}$/.test(bp.address.state)) {\n          addError('PROVIDER', 'address.state', bp.address.state, 'Provider state must be 2-letter code (e.g., TX, CA)');\n        }\n        \n        if (!bp.address.postalCode || !/^\\d{5}(-\\d{4})?$/.test(bp.address.postalCode)) {\n          addError('PROVIDER', 'address.postalCode', bp.address.postalCode, 'Provider ZIP code must be 5 digits or 5+4 format');\n        }\n      }\n    }\n\n    // 3. HIERARCHICAL LOOP VALIDATION\n    if (parsedEDI.hierarchicalLoops && Array.isArray(parsedEDI.hierarchicalLoops)) {\n      let hasBillingProvider = false;\n      \n      parsedEDI.hierarchicalLoops.forEach((hl, hlIndex) => {\n        if (hl.loop === '2000A') {\n          hasBillingProvider = true;\n          \n          // Validate subscribers\n          if (hl.subscribers && Array.isArray(hl.subscribers)) {\n            hl.subscribers.forEach((subscriber, subIndex) => {\n              validateSubscriber(subscriber, `HL[${hlIndex}].subscribers[${subIndex}]`);\n            });\n          }\n          \n          // Validate patients\n          if (hl.patients && Array.isArray(hl.patients)) {\n            hl.patients.forEach((patient, patIndex) => {\n              validatePatient(patient, `HL[${hlIndex}].patients[${patIndex}]`);\n            });\n          }\n        }\n      });\n      \n      if (!hasBillingProvider) {\n        addError('STRUCTURE', 'hierarchicalLoops', null, 'No billing provider loop (2000A) found');\n      }\n    }\n\n    // Validation helper functions\n    function validateSubscriber(subscriber, path) {\n      if (!subscriber.subscriber) {\n        addError('SUBSCRIBER', `${path}.subscriber`, null, 'Subscriber information is required');\n        return;\n      }\n      \n      const sub = subscriber.subscriber;\n      \n      if (!sub.firstName || sub.firstName.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.firstName`, sub.firstName, 'Subscriber first name is required');\n      }\n      \n      if (!sub.lastName || sub.lastName.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.lastName`, sub.lastName, 'Subscriber last name is required');\n      }\n      \n      if (!sub.memberId || sub.memberId.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.memberId`, sub.memberId, 'Subscriber member ID is required');\n      }\n      \n      // Validate demographics\n      if (subscriber.demographicInfo) {\n        const demo = subscriber.demographicInfo;\n        \n        if (demo.birthdate && !/^\\d{8}$/.test(demo.birthdate)) {\n          addError('DEMOGRAPHICS', `${path}.birthdate`, demo.birthdate, 'Birthdate must be YYYYMMDD format');\n        }\n        \n        if (demo.gender && !['M', 'F', 'U'].includes(demo.gender)) {\n          addError('DEMOGRAPHICS', `${path}.gender`, demo.gender, 'Gender must be M, F, or U');\n        }\n      }\n      \n      // Validate payer\n      if (!subscriber.payer || !subscriber.payer.payerName) {\n        addError('PAYER', `${path}.payer`, null, 'Payer information is required');\n      }\n      \n      // Validate claims\n      if (subscriber.claims && Array.isArray(subscriber.claims)) {\n        subscriber.claims.forEach((claim, claimIndex) => {\n          validateClaim(claim, `${path}.claims[${claimIndex}]`);\n          validationResults.summary.totalClaims++;\n        });\n      }\n    }\n\n    function validatePatient(patient, path) {\n      if (!patient.patient) {\n        addError('PATIENT', `${path}.patient`, null, 'Patient information is required');\n        return;\n      }\n      \n      const pat = patient.patient;\n      \n      if (!pat.firstName || pat.firstName.trim().length === 0) {\n        addError('PATIENT', `${path}.firstName`, pat.firstName, 'Patient first name is required');\n      }\n      \n      if (!pat.lastName || pat.lastName.trim().length === 0) {\n        addError('PATIENT', `${path}.lastName`, pat.lastName, 'Patient last name is required');\n      }\n      \n      // Patient relationship validation\n      if (patient.patientInfo && patient.patientInfo.individualRelationshipCode) {\n        const validRelationships = ['01', '18', '19', '20', '21', '22', '23', '24', '29', '32', '33', '36', '39', '40', '41', '43', '53'];\n        if (!validRelationships.includes(patient.patientInfo.individualRelationshipCode)) {\n          addWarning('PATIENT', `${path}.relationshipCode`, patient.patientInfo.individualRelationshipCode, 'Invalid relationship code');\n        }\n      }\n      \n      // Validate claims\n      if (patient.claims && Array.isArray(patient.claims)) {\n        patient.claims.forEach((claim, claimIndex) => {\n          validateClaim(claim, `${path}.claims[${claimIndex}]`);\n          validationResults.summary.totalClaims++;\n        });\n      }\n    }\n\n    function validateClaim(claim, path) {\n      if (!claim.claimSubmitterIdentifier || claim.claimSubmitterIdentifier.trim().length === 0) {\n        addError('CLAIM', `${path}.claimSubmitterIdentifier`, claim.claimSubmitterIdentifier, 'Claim ID is required');\n      }\n      \n      if (!claim.totalClaimChargeAmount || isNaN(parseFloat(claim.totalClaimChargeAmount))) {\n        addError('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Total claim charge must be a valid number');\n      } else {\n        const amount = parseFloat(claim.totalClaimChargeAmount);\n        if (amount <= 0) {\n          addError('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Claim amount must be greater than 0');\n        }\n        if (amount > 999999.99) {\n          addWarning('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Claim amount is unusually high');\n        }\n      }\n      \n      // Validate diagnosis codes\n      if (!claim.diagnosisCodes || claim.diagnosisCodes.length === 0) {\n        addError('CLAIM', `${path}.diagnosisCodes`, null, 'At least one diagnosis code is required');\n      } else {\n        claim.diagnosisCodes.forEach((diag, diagIndex) => {\n          if (!diag.diagnosisCode || diag.diagnosisCode.trim().length === 0) {\n            addError('DIAGNOSIS', `${path}.diagnosisCodes[${diagIndex}]`, diag.diagnosisCode, 'Diagnosis code cannot be empty');\n          }\n          // Basic ICD-10 format check (letter followed by digits and possibly more letters)\n          else if (!/^[A-Z]\\d{2,3}(\\.[A-Z0-9]{1,4})?$/.test(diag.diagnosisCode)) {\n            addWarning('DIAGNOSIS', `${path}.diagnosisCodes[${diagIndex}]`, diag.diagnosisCode, 'Diagnosis code may not be valid ICD-10 format');\n          }\n        });\n      }\n      \n      // Validate service lines\n      if (!claim.serviceLines || claim.serviceLines.length === 0) {\n        addError('CLAIM', `${path}.serviceLines`, null, 'At least one service line is required');\n      } else {\n        let totalServiceCharges = 0;\n        \n        claim.serviceLines.forEach((service, serviceIndex) => {\n          if (!service.procedureCode || !/^\\d{5}$/.test(service.procedureCode)) {\n            addWarning('SERVICE', `${path}.serviceLines[${serviceIndex}].procedureCode`, service.procedureCode, 'HCPCS Code');\n          }\n          \n          if (!service.charge || isNaN(parseFloat(service.charge))) {\n            addError('SERVICE', `${path}.serviceLines[${serviceIndex}].charge`, service.charge, 'Service charge must be a valid number');\n          } else {\n            totalServiceCharges += parseFloat(service.charge);\n          }\n          \n          if (!service.units || isNaN(parseInt(service.units)) || parseInt(service.units) <= 0) {\n            addError('SERVICE', `${path}.serviceLines[${serviceIndex}].units`, service.units, 'Service units must be a positive integer');\n          }\n          \n        });\n        \n        // Check if service line charges match claim total\n        const claimTotal = parseFloat(claim.totalClaimChargeAmount || 0);\n        if (Math.abs(totalServiceCharges - claimTotal) > 0.01) {\n          addWarning('CLAIM', `${path}.totalVsServices`, null, `Claim total ($${claimTotal}) doesn't match sum of service charges ($${totalServiceCharges})`);\n        }\n      }\n      \n      // If we get here without errors for this claim, count it as valid\n      if (validationResults.errors.filter(e => e.field.startsWith(path)).length === 0) {\n        validationResults.summary.validClaims++;\n      }\n    }\n\n  } catch (error) {\n    addError('VALIDATION', 'processing', null, `Validation processing error: ${error.message}`);\n  }\n\n  // Update summary counts\n  validationResults.summary.errorCount = validationResults.errors.length;\n  validationResults.summary.warningCount = validationResults.warnings.length;\n  \n  return validationResults;\n}\n\n// Main execution\nconst parsedEDI = $input.first().json;\n\nif (!parsedEDI) {\n  throw new Error('No parsed EDI data found in input');\n}\n\nconst validationResults = validateHealthcareEDI(parsedEDI);\n\n// Return both original data and validation results\nreturn {\n  json: {\n    originalData: parsedEDI,\n    validation: validationResults,\n    // Add flags for workflow routing\n    isValid: validationResults.isValid,\n    hasErrors: validationResults.errors.length > 0,\n    hasWarnings: validationResults.warnings.length > 0,\n    processingRecommendation: validationResults.isValid ? 'PROCEED' : 'REJECT'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        256
      ],
      "id": "100ec0a8-daa0-45fc-9031-965be3dccf86",
      "name": "EDI Data Quality & Validation Node (Professional)"
    },
    {
      "parameters": {
        "jsCode": "function validateHealthcareEDI(parsedEDI) {\n  const validationResults = {\n    isValid: true,\n    errors: [],\n    warnings: [],\n    summary: {\n      totalClaims: 0,\n      validClaims: 0,\n      errorCount: 0,\n      warningCount: 0\n    }\n  };\n\n  // Helper function to add error\n  function addError(category, field, value, message) {\n    validationResults.errors.push({\n      category,\n      field,\n      value: value || 'N/A',\n      message,\n      severity: 'ERROR'\n    });\n    validationResults.isValid = false;\n  }\n\n  // Helper function to add warning\n  function addWarning(category, field, value, message) {\n    validationResults.warnings.push({\n      category,\n      field,\n      value: value || 'N/A',\n      message,\n      severity: 'WARNING'\n    });\n  }\n\n  // 1. STRUCTURAL VALIDATION\n  try {\n    // Check required top-level objects\n    const requiredObjects = ['interchangeHeader', 'groupHeader', 'transactionSetHeader', 'beginningOfHierarchicalTransaction', 'submitter', 'receiver', 'billingProvider', 'hierarchicalLoops', 'transactionSetTrailer', 'groupTrailer', 'interchangeTrailer'];\n    for (const obj of requiredObjects) {\n      if (!parsedEDI[obj]) {\n        addError('STRUCTURE', obj, null, `Missing required object: ${obj}`);\n      }\n    }\n\n    // Validate interchange header\n    if (parsedEDI.interchangeHeader) {\n      const ih = parsedEDI.interchangeHeader;\n\n      let controlNumberCheck = true;\n      let interchangeControlNumberCheck = true;\n\n      if (!ih.authorizationInformationQualifier || ih.authorizationInformationQualifier.length === 0) {\n        addError('INTERCHANGE', 'authorizationInformationQualifier', ih.authorizationInformationQualifier, 'Authorization Information Qualifier is required');\n      } else if (ih.authorizationInformationQualifier != '00') {\n        addError('INTERCHANGE', 'authorizationInformationQualifier', ih.authorizationInformationQualifier, 'Authorization Information Qualifier expected value 00');\n      }\n\n      if (!ih.securityInformationQualifier || ih.securityInformationQualifier.length === 0) {\n        addError('INTERCHANGE', 'securityInformationQualifier', ih.securityInformationQualifier, 'Security Information Qualifier is required');\n      } else if (ih.securityInformationQualifier != '00') {\n        addError('INTERCHANGE', 'securityInformationQualifier', ih.securityInformationQualifier, 'Security Information Qualifier expected value 00');\n      }\n\n      if (!ih.interchangeIdQualifierOne || ih.interchangeIdQualifierOne.length === 0) {\n        addError('INTERCHANGE', 'interchangeIdQualifierOne', ih.interchangeIdQualifierOne, 'Interchange ID Qualifier One is required');\n      } else if (ih.interchangeIdQualifierOne != 'ZZ') {\n        addError('INTERCHANGE', 'interchangeIdQualifierOne', ih.interchangeIdQualifierOne, 'Interchange ID Qualifier One expected value ZZ');\n      }\n      \n      if (!ih.submitterId || ih.submitterId.length === 0) {\n        addError('INTERCHANGE', 'submitterId', ih.submitterId, 'Submitter ID is required');\n      }\n\n      if (!ih.interchangeIdQualifierTwo || ih.interchangeIdQualifierTwo.length === 0) {\n        addError('INTERCHANGE', 'interchangeIdQualifierTwo', ih.interchangeIdQualifierTwo, 'Interchange ID Qualifier Two is required');\n      } else if (ih.interchangeIdQualifierTwo != 'ZZ') {\n        addError('INTERCHANGE', 'interchangeIdQualifierTwo', ih.interchangeIdQualifierTwo, 'Interchange ID Qualifier Two expected value ZZ');\n      }\n      \n      if (!ih.receiverId || ih.receiverId.length === 0) {\n        addError('INTERCHANGE', 'receiverId', ih.receiverId, 'Receiver ID is required');\n      }\n      \n      if (!ih.date || !/^\\d{6}$/.test(ih.date)) {\n        addError('INTERCHANGE', 'date', ih.date, 'Date must be YYMMDD format');\n      }\n\n      if (!ih.controlNumber || ih.controlNumber.length === 0) {\n        addError('INTERCHANGE', 'controlNumber', ih.controlNumber, 'Control Number is required');\n        controlNumberCheck = false;\n      }\n\n      if (parsedEDI.interchangeTrailer) {\n        const it = parsedEDI.interchangeTrailer;\n\n        if (!it.interchangeControlNumber || it.interchangeControlNumber.length === 0) {\n          addError('INTERCHANGE', 'interchangeControlNumber', it.interchangeControlNumber, 'Interchange Control Number is required');\n          interchangeControlNumberCheck = false;\n        }\n\n        if (controlNumberCheck && interchangeControlNumberCheck) {\n          if (controlNumberCheck != interchangeControlNumberCheck) {\n            addError('INTERCHANGE', 'Header & Trailer Control Number', ih.controlNumber + ' / ' + it.interchangeControlNumber, 'Header and Trailer Control Numbers do not match!');\n          }\n        }\n        \n      }\n\n      if (!ih.acknowledgementRequested || ih.acknowledgementRequested.length === 0) {\n        addError('INTERCHANGE', 'acknowledgementRequested', ih.acknowledgementRequested, 'Acknowledgement Requested is required');\n      } else if (ih.acknowledgementRequested == 0) {\n        addWarning('INTERCHANGE', 'acknowledgementRequested', ih.acknowledgementRequested, 'No acknowledgement requested');\n      }\n      \n      if (ih.usageIndicator && !['T', 'P'].includes(ih.usageIndicator)) {\n        addWarning('INTERCHANGE', 'usageIndicator', ih.usageIndicator, 'Usage indicator should be T (test) or P (production)');\n      }\n    }\n\n    // Validate Functional Group Header\n    if (parsedEDI.groupHeader) {\n      const gh = parsedEDI.groupHeader;\n      \n      if (gh.versionIdentifierCode !== '005010X223A2') {\n        addError('GROUP HEADER', 'versionIdentifierCode', gh.versionIdentifierCode, 'Version Identifier Code expected value 005010X222A1');\n      }\n  \n    }\n\n    // Validate transaction set header\n    if (parsedEDI.transactionSetHeader) {\n      const tsh = parsedEDI.transactionSetHeader;\n      \n      if (tsh.implementationConventionReference !== '005010X223A2') {\n        addError('TRANSACTION', 'implementationConventionReference', tsh.implementationConventionReference, 'Implementation Convention Reference expected value 005010X222A1');\n      }\n    }\n\n    // Validate Beginning of Hierarchical Transaction\n    if (parsedEDI.beginningOfHierarchicalTransaction) {\n      const bht = parsedEDI.beginningOfHierarchicalTransaction;\n\n      if (!bht.transactionSetPurposeCode || bht.transactionSetPurposeCode.length === 0) {\n        addError('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionSetPurposeCode', bht.transactionSetPurposeCode, 'Transaction Set Purpose Code is required');\n      } else if (bht.transactionSetPurposeCode != '00') {\n        addWarning('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionSetPurposeCode', bht.transactionSetPurposeCode, 'Transaction Set Purpose Code expected value 00');\n      }\n\n      if (!bht.transactionType || bht.transactionType.length === 0) {\n        addError('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionType', bht.transactionType, 'Transaction Type is required');\n      } else if (bht.transactionType != 'CH') {\n        addWarning('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionType', bht.transactionType, 'Transaction Type expected value CH');\n      }\n      \n    }\n\n  } catch (error) {\n    addError('STRUCTURE', 'parsing', null, `Failed to validate structure: ${error.message}`);\n  }\n\n  // 2. BUSINESS RULE VALIDATION\n  try {\n    // Validate billing provider\n    if (parsedEDI.billingProvider) {\n      const bp = parsedEDI.billingProvider;\n      \n      // NPI validation (must be 10 digits)\n      if (!bp.billingProviderIdentifier || !/^\\d{10}$/.test(bp.billingProviderIdentifier)) {\n        addError('PROVIDER', 'billingProviderIdentifier', bp.billingProviderIdentifier, 'Billing provider NPI must be exactly 10 digits');\n      }\n      \n      if (!bp.billingProviderName || bp.billingProviderName.trim().length === 0) {\n        addError('PROVIDER', 'billingProviderName', bp.billingProviderName, 'Billing provider name is required');\n      }\n\n      // Address validation\n      if (bp.address) {\n        if (!bp.address.addressLine1 || bp.address.addressLine1.trim().length === 0) {\n          addWarning('PROVIDER', 'address.addressLine1', bp.address.addressLine1, 'Provider address line 1 should not be empty');\n        }\n        \n        if (!bp.address.city || bp.address.city.trim().length === 0) {\n          addError('PROVIDER', 'address.city', bp.address.city, 'Provider city is required');\n        }\n        \n        if (!bp.address.state || !/^[A-Z]{2}$/.test(bp.address.state)) {\n          addError('PROVIDER', 'address.state', bp.address.state, 'Provider state must be 2-letter code (e.g., TX, CA)');\n        }\n        \n        if (!bp.address.postalCode || !/^\\d{5}(-\\d{4})?$/.test(bp.address.postalCode)) {\n          addError('PROVIDER', 'address.postalCode', bp.address.postalCode, 'Provider ZIP code must be 5 digits or 5+4 format');\n        }\n      }\n    }\n\n    // 3. HIERARCHICAL LOOP VALIDATION\n    if (parsedEDI.hierarchicalLoops && Array.isArray(parsedEDI.hierarchicalLoops)) {\n      let hasBillingProvider = false;\n      \n      parsedEDI.hierarchicalLoops.forEach((hl, hlIndex) => {\n        if (hl.loop === '2000A') {\n          hasBillingProvider = true;\n          \n          // Validate subscribers\n          if (hl.subscribers && Array.isArray(hl.subscribers)) {\n            hl.subscribers.forEach((subscriber, subIndex) => {\n              validateSubscriber(subscriber, `HL[${hlIndex}].subscribers[${subIndex}]`);\n            });\n          }\n          \n          // Validate patients\n          if (hl.patients && Array.isArray(hl.patients)) {\n            hl.patients.forEach((patient, patIndex) => {\n              validatePatient(patient, `HL[${hlIndex}].patients[${patIndex}]`);\n            });\n          }\n        }\n      });\n      \n      if (!hasBillingProvider) {\n        addError('STRUCTURE', 'hierarchicalLoops', null, 'No billing provider loop (2000A) found');\n      }\n    }\n\n    // Validation helper functions\n    function validateSubscriber(subscriber, path) {\n      if (!subscriber.subscriber) {\n        addError('SUBSCRIBER', `${path}.subscriber`, null, 'Subscriber information is required');\n        return;\n      }\n      \n      const sub = subscriber.subscriber;\n      \n      if (!sub.firstName || sub.firstName.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.firstName`, sub.firstName, 'Subscriber first name is required');\n      }\n      \n      if (!sub.lastName || sub.lastName.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.lastName`, sub.lastName, 'Subscriber last name is required');\n      }\n      \n      if (!sub.memberId || sub.memberId.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.memberId`, sub.memberId, 'Subscriber member ID is required');\n      }\n      \n      // Validate demographics\n      if (subscriber.demographicInfo) {\n        const demo = subscriber.demographicInfo;\n        \n        if (demo.birthdate && !/^\\d{8}$/.test(demo.birthdate)) {\n          addError('DEMOGRAPHICS', `${path}.birthdate`, demo.birthdate, 'Birthdate must be YYYYMMDD format');\n        }\n        \n        if (demo.gender && !['M', 'F', 'U'].includes(demo.gender)) {\n          addError('DEMOGRAPHICS', `${path}.gender`, demo.gender, 'Gender must be M, F, or U');\n        }\n      }\n      \n      // Validate payer\n      if (!subscriber.payer || !subscriber.payer.payerName) {\n        addError('PAYER', `${path}.payer`, null, 'Payer information is required');\n      }\n      \n      // Validate claims\n      if (subscriber.claims && Array.isArray(subscriber.claims)) {\n        subscriber.claims.forEach((claim, claimIndex) => {\n          validateClaim(claim, `${path}.claims[${claimIndex}]`);\n          validationResults.summary.totalClaims++;\n        });\n      }\n    }\n\n    function validatePatient(patient, path) {\n      if (!patient.patient) {\n        addError('PATIENT', `${path}.patient`, null, 'Patient information is required');\n        return;\n      }\n      \n      const pat = patient.patient;\n      \n      if (!pat.firstName || pat.firstName.trim().length === 0) {\n        addError('PATIENT', `${path}.firstName`, pat.firstName, 'Patient first name is required');\n      }\n      \n      if (!pat.lastName || pat.lastName.trim().length === 0) {\n        addError('PATIENT', `${path}.lastName`, pat.lastName, 'Patient last name is required');\n      }\n      \n      // Patient relationship validation\n      if (patient.patientInfo && patient.patientInfo.individualRelationshipCode) {\n        const validRelationships = ['01', '18', '19', '20', '21', '22', '23', '24', '29', '32', '33', '36', '39', '40', '41', '43', '53'];\n        if (!validRelationships.includes(patient.patientInfo.individualRelationshipCode)) {\n          addWarning('PATIENT', `${path}.relationshipCode`, patient.patientInfo.individualRelationshipCode, 'Invalid relationship code');\n        }\n      }\n      \n      // Validate claims\n      if (patient.claims && Array.isArray(patient.claims)) {\n        patient.claims.forEach((claim, claimIndex) => {\n          validateClaim(claim, `${path}.claims[${claimIndex}]`);\n          validationResults.summary.totalClaims++;\n        });\n      }\n    }\n\n    function validateClaim(claim, path) {\n      if (!claim.claimSubmitterIdentifier || claim.claimSubmitterIdentifier.trim().length === 0) {\n        addError('CLAIM', `${path}.claimSubmitterIdentifier`, claim.claimSubmitterIdentifier, 'Claim ID is required');\n      }\n      \n      if (!claim.totalClaimChargeAmount || isNaN(parseFloat(claim.totalClaimChargeAmount))) {\n        addError('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Total claim charge must be a valid number');\n      } else {\n        const amount = parseFloat(claim.totalClaimChargeAmount);\n        if (amount <= 0) {\n          addError('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Claim amount must be greater than 0');\n        }\n        if (amount > 999999.99) {\n          addWarning('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Claim amount is unusually high');\n        }\n      }\n      \n      // Validate diagnosis codes\n      if (!claim.diagnosisCodes || claim.diagnosisCodes.length === 0) {\n        addError('CLAIM', `${path}.diagnosisCodes`, null, 'At least one diagnosis code is required');\n      } else {\n        claim.diagnosisCodes.forEach((diag, diagIndex) => {\n          if (!diag.diagnosisCode || diag.diagnosisCode.trim().length === 0) {\n            addError('DIAGNOSIS', `${path}.diagnosisCodes[${diagIndex}]`, diag.diagnosisCode, 'Diagnosis code cannot be empty');\n          }\n          // Basic ICD-10 format check (letter followed by digits and possibly more letters)\n          else if (!/^[A-Z]\\d{2,3}(\\.[A-Z0-9]{1,4})?$/.test(diag.diagnosisCode)) {\n            addWarning('DIAGNOSIS', `${path}.diagnosisCodes[${diagIndex}]`, diag.diagnosisCode, 'Diagnosis code may not be valid ICD-10 format');\n          }\n        });\n      }\n      \n      // Validate service lines\n      if (!claim.serviceLines || claim.serviceLines.length === 0) {\n        addError('CLAIM', `${path}.serviceLines`, null, 'At least one service line is required');\n      } else {\n        let totalServiceCharges = 0;\n        \n        claim.serviceLines.forEach((service, serviceIndex) => {\n          if (!service.procedureCode || !/^\\d{5}$/.test(service.procedureCode)) {\n            addWarning('SERVICE', `${path}.serviceLines[${serviceIndex}].procedureCode`, service.procedureCode, 'HCPCS Code');\n          }\n          \n          if (!service.charge || isNaN(parseFloat(service.charge))) {\n            addError('SERVICE', `${path}.serviceLines[${serviceIndex}].charge`, service.charge, 'Service charge must be a valid number');\n          } else {\n            totalServiceCharges += parseFloat(service.charge);\n          }\n          \n          if (!service.units || isNaN(parseInt(service.units)) || parseInt(service.units) <= 0) {\n            addError('SERVICE', `${path}.serviceLines[${serviceIndex}].units`, service.units, 'Service units must be a positive integer');\n          }\n          \n        });\n        \n        // Check if service line charges match claim total\n        const claimTotal = parseFloat(claim.totalClaimChargeAmount || 0);\n        if (Math.abs(totalServiceCharges - claimTotal) > 0.01) {\n          addWarning('CLAIM', `${path}.totalVsServices`, null, `Claim total ($${claimTotal}) doesn't match sum of service charges ($${totalServiceCharges})`);\n        }\n      }\n      \n      // If we get here without errors for this claim, count it as valid\n      if (validationResults.errors.filter(e => e.field.startsWith(path)).length === 0) {\n        validationResults.summary.validClaims++;\n      }\n    }\n\n  } catch (error) {\n    addError('VALIDATION', 'processing', null, `Validation processing error: ${error.message}`);\n  }\n\n  // Update summary counts\n  validationResults.summary.errorCount = validationResults.errors.length;\n  validationResults.summary.warningCount = validationResults.warnings.length;\n  \n  return validationResults;\n}\n\n// Main execution\nconst parsedEDI = $input.first().json;\n\nif (!parsedEDI) {\n  throw new Error('No parsed EDI data found in input');\n}\n\nconst validationResults = validateHealthcareEDI(parsedEDI);\n\n// Return both original data and validation results\nreturn {\n  json: {\n    originalData: parsedEDI,\n    validation: validationResults,\n    // Add flags for workflow routing\n    isValid: validationResults.isValid,\n    hasErrors: validationResults.errors.length > 0,\n    hasWarnings: validationResults.warnings.length > 0,\n    processingRecommendation: validationResults.isValid ? 'PROCEED' : 'REJECT'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        432
      ],
      "id": "d3587f36-b430-41b7-b358-abbcce8b722d",
      "name": "EDI Data Quality & Validation Node (Institutional)"
    },
    {
      "parameters": {
        "jsCode": "function validateHealthcareEDI(parsedEDI) {\n  const validationResults = {\n    isValid: true,\n    errors: [],\n    warnings: [],\n    summary: {\n      totalClaims: 0,\n      validClaims: 0,\n      errorCount: 0,\n      warningCount: 0\n    }\n  };\n\n  // Helper function to add error\n  function addError(category, field, value, message) {\n    validationResults.errors.push({\n      category,\n      field,\n      value: value || 'N/A',\n      message,\n      severity: 'ERROR'\n    });\n    validationResults.isValid = false;\n  }\n\n  // Helper function to add warning\n  function addWarning(category, field, value, message) {\n    validationResults.warnings.push({\n      category,\n      field,\n      value: value || 'N/A',\n      message,\n      severity: 'WARNING'\n    });\n  }\n\n  // 1. STRUCTURAL VALIDATION\n  try {\n    // Check required top-level objects\n    const requiredObjects = ['interchangeHeader', 'groupHeader', 'transactionSetHeader', 'beginningOfHierarchicalTransaction', 'submitter', 'receiver', 'billingProvider', 'hierarchicalLoops', 'transactionSetTrailer', 'groupTrailer', 'interchangeTrailer'];\n    for (const obj of requiredObjects) {\n      if (!parsedEDI[obj]) {\n        addError('STRUCTURE', obj, null, `Missing required object: ${obj}`);\n      }\n    }\n\n    // Validate interchange header\n    if (parsedEDI.interchangeHeader) {\n      const ih = parsedEDI.interchangeHeader;\n\n      let controlNumberCheck = true;\n      let interchangeControlNumberCheck = true;\n\n      if (!ih.authorizationInformationQualifier || ih.authorizationInformationQualifier.length === 0) {\n        addError('INTERCHANGE', 'authorizationInformationQualifier', ih.authorizationInformationQualifier, 'Authorization Information Qualifier is required');\n      } else if (ih.authorizationInformationQualifier != '00') {\n        addError('INTERCHANGE', 'authorizationInformationQualifier', ih.authorizationInformationQualifier, 'Authorization Information Qualifier expected value 00');\n      }\n\n      if (!ih.securityInformationQualifier || ih.securityInformationQualifier.length === 0) {\n        addError('INTERCHANGE', 'securityInformationQualifier', ih.securityInformationQualifier, 'Security Information Qualifier is required');\n      } else if (ih.securityInformationQualifier != '00') {\n        addError('INTERCHANGE', 'securityInformationQualifier', ih.securityInformationQualifier, 'Security Information Qualifier expected value 00');\n      }\n\n      if (!ih.interchangeIdQualifierOne || ih.interchangeIdQualifierOne.length === 0) {\n        addError('INTERCHANGE', 'interchangeIdQualifierOne', ih.interchangeIdQualifierOne, 'Interchange ID Qualifier One is required');\n      } else if (ih.interchangeIdQualifierOne != 'ZZ') {\n        addError('INTERCHANGE', 'interchangeIdQualifierOne', ih.interchangeIdQualifierOne, 'Interchange ID Qualifier One expected value ZZ');\n      }\n      \n      if (!ih.submitterId || ih.submitterId.length === 0) {\n        addError('INTERCHANGE', 'submitterId', ih.submitterId, 'Submitter ID is required');\n      }\n\n      if (!ih.interchangeIdQualifierTwo || ih.interchangeIdQualifierTwo.length === 0) {\n        addError('INTERCHANGE', 'interchangeIdQualifierTwo', ih.interchangeIdQualifierTwo, 'Interchange ID Qualifier Two is required');\n      } else if (ih.interchangeIdQualifierTwo != 'ZZ') {\n        addError('INTERCHANGE', 'interchangeIdQualifierTwo', ih.interchangeIdQualifierTwo, 'Interchange ID Qualifier Two expected value ZZ');\n      }\n      \n      if (!ih.receiverId || ih.receiverId.length === 0) {\n        addError('INTERCHANGE', 'receiverId', ih.receiverId, 'Receiver ID is required');\n      }\n      \n      if (!ih.date || !/^\\d{6}$/.test(ih.date)) {\n        addError('INTERCHANGE', 'date', ih.date, 'Date must be YYMMDD format');\n      }\n\n      if (!ih.controlNumber || ih.controlNumber.length === 0) {\n        addError('INTERCHANGE', 'controlNumber', ih.controlNumber, 'Control Number is required');\n        controlNumberCheck = false;\n      }\n\n      if (parsedEDI.interchangeTrailer) {\n        const it = parsedEDI.interchangeTrailer;\n\n        if (!it.interchangeControlNumber || it.interchangeControlNumber.length === 0) {\n          addError('INTERCHANGE', 'interchangeControlNumber', it.interchangeControlNumber, 'Interchange Control Number is required');\n          interchangeControlNumberCheck = false;\n        }\n\n        if (controlNumberCheck && interchangeControlNumberCheck) {\n          if (controlNumberCheck != interchangeControlNumberCheck) {\n            addError('INTERCHANGE', 'Header & Trailer Control Number', ih.controlNumber + ' / ' + it.interchangeControlNumber, 'Header and Trailer Control Numbers do not match!');\n          }\n        }\n        \n      }\n\n      if (!ih.acknowledgementRequested || ih.acknowledgementRequested.length === 0) {\n        addError('INTERCHANGE', 'acknowledgementRequested', ih.acknowledgementRequested, 'Acknowledgement Requested is required');\n      } else if (ih.acknowledgementRequested == 0) {\n        addWarning('INTERCHANGE', 'acknowledgementRequested', ih.acknowledgementRequested, 'No acknowledgement requested');\n      }\n      \n      if (ih.usageIndicator && !['T', 'P'].includes(ih.usageIndicator)) {\n        addWarning('INTERCHANGE', 'usageIndicator', ih.usageIndicator, 'Usage indicator should be T (test) or P (production)');\n      }\n    }\n\n    // Validate Functional Group Header\n    if (parsedEDI.groupHeader) {\n      const gh = parsedEDI.groupHeader;\n      \n      if (gh.versionIdentifierCode !== '005010X224A2') {\n        addError('GROUP HEADER', 'versionIdentifierCode', gh.versionIdentifierCode, 'Version Identifier Code expected value 005010X222A1');\n      }\n  \n    }\n\n    // Validate transaction set header\n    if (parsedEDI.transactionSetHeader) {\n      const tsh = parsedEDI.transactionSetHeader;\n      \n      if (tsh.implementationConventionReference !== '005010X224A2') {\n        addError('TRANSACTION', 'implementationConventionReference', tsh.implementationConventionReference, 'Implementation Convention Reference expected value 005010X222A1');\n      }\n    }\n\n    // Validate Beginning of Hierarchical Transaction\n    if (parsedEDI.beginningOfHierarchicalTransaction) {\n      const bht = parsedEDI.beginningOfHierarchicalTransaction;\n\n      if (!bht.transactionSetPurposeCode || bht.transactionSetPurposeCode.length === 0) {\n        addError('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionSetPurposeCode', bht.transactionSetPurposeCode, 'Transaction Set Purpose Code is required');\n      } else if (bht.transactionSetPurposeCode != '00') {\n        addWarning('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionSetPurposeCode', bht.transactionSetPurposeCode, 'Transaction Set Purpose Code expected value 00');\n      }\n\n      if (!bht.transactionType || bht.transactionType.length === 0) {\n        addError('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionType', bht.transactionType, 'Transaction Type is required');\n      } else if (bht.transactionType != 'CH') {\n        addWarning('BEGINNING OF HIERARCHICAL STRUCTURE CODE', 'transactionType', bht.transactionType, 'Transaction Type expected value CH');\n      }\n      \n    }\n\n  } catch (error) {\n    addError('STRUCTURE', 'parsing', null, `Failed to validate structure: ${error.message}`);\n  }\n\n  // 2. BUSINESS RULE VALIDATION\n  try {\n    // Validate billing provider\n    if (parsedEDI.billingProvider) {\n      const bp = parsedEDI.billingProvider;\n      \n      // NPI validation (must be 10 digits)\n      if (!bp.billingProviderIdentifier || !/^\\d{10}$/.test(bp.billingProviderIdentifier)) {\n        addError('PROVIDER', 'billingProviderIdentifier', bp.billingProviderIdentifier, 'Billing provider NPI must be exactly 10 digits');\n      }\n      \n      if (!bp.billingProviderName || bp.billingProviderName.trim().length === 0) {\n        addError('PROVIDER', 'billingProviderName', bp.billingProviderName, 'Billing provider name is required');\n      }\n\n      // Address validation\n      if (bp.address) {\n        if (!bp.address.addressLine1 || bp.address.addressLine1.trim().length === 0) {\n          addWarning('PROVIDER', 'address.addressLine1', bp.address.addressLine1, 'Provider address line 1 should not be empty');\n        }\n        \n        if (!bp.address.city || bp.address.city.trim().length === 0) {\n          addError('PROVIDER', 'address.city', bp.address.city, 'Provider city is required');\n        }\n        \n        if (!bp.address.state || !/^[A-Z]{2}$/.test(bp.address.state)) {\n          addError('PROVIDER', 'address.state', bp.address.state, 'Provider state must be 2-letter code (e.g., TX, CA)');\n        }\n        \n        if (!bp.address.postalCode || !/^\\d{5}(-\\d{4})?$/.test(bp.address.postalCode)) {\n          addError('PROVIDER', 'address.postalCode', bp.address.postalCode, 'Provider ZIP code must be 5 digits or 5+4 format');\n        }\n      }\n    }\n\n    // 3. HIERARCHICAL LOOP VALIDATION\n    if (parsedEDI.hierarchicalLoops && Array.isArray(parsedEDI.hierarchicalLoops)) {\n      let hasBillingProvider = false;\n      \n      parsedEDI.hierarchicalLoops.forEach((hl, hlIndex) => {\n        if (hl.loop === '2000A') {\n          hasBillingProvider = true;\n          \n          // Validate subscribers\n          if (hl.subscribers && Array.isArray(hl.subscribers)) {\n            hl.subscribers.forEach((subscriber, subIndex) => {\n              validateSubscriber(subscriber, `HL[${hlIndex}].subscribers[${subIndex}]`);\n            });\n          }\n          \n          // Validate patients\n          if (hl.patients && Array.isArray(hl.patients)) {\n            hl.patients.forEach((patient, patIndex) => {\n              validatePatient(patient, `HL[${hlIndex}].patients[${patIndex}]`);\n            });\n          }\n        }\n      });\n      \n      if (!hasBillingProvider) {\n        addError('STRUCTURE', 'hierarchicalLoops', null, 'No billing provider loop (2000A) found');\n      }\n    }\n\n    // Validation helper functions\n    function validateSubscriber(subscriber, path) {\n      if (!subscriber.subscriber) {\n        addError('SUBSCRIBER', `${path}.subscriber`, null, 'Subscriber information is required');\n        return;\n      }\n      \n      const sub = subscriber.subscriber;\n      \n      if (!sub.firstName || sub.firstName.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.firstName`, sub.firstName, 'Subscriber first name is required');\n      }\n      \n      if (!sub.lastName || sub.lastName.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.lastName`, sub.lastName, 'Subscriber last name is required');\n      }\n      \n      if (!sub.memberId || sub.memberId.trim().length === 0) {\n        addError('SUBSCRIBER', `${path}.memberId`, sub.memberId, 'Subscriber member ID is required');\n      }\n      \n      // Validate demographics\n      if (subscriber.demographicInfo) {\n        const demo = subscriber.demographicInfo;\n        \n        if (demo.birthdate && !/^\\d{8}$/.test(demo.birthdate)) {\n          addError('DEMOGRAPHICS', `${path}.birthdate`, demo.birthdate, 'Birthdate must be YYYYMMDD format');\n        }\n        \n        if (demo.gender && !['M', 'F', 'U'].includes(demo.gender)) {\n          addError('DEMOGRAPHICS', `${path}.gender`, demo.gender, 'Gender must be M, F, or U');\n        }\n      }\n      \n      // Validate payer\n      if (!subscriber.payer || !subscriber.payer.payerName) {\n        addError('PAYER', `${path}.payer`, null, 'Payer information is required');\n      }\n      \n      // Validate claims\n      if (subscriber.claims && Array.isArray(subscriber.claims)) {\n        subscriber.claims.forEach((claim, claimIndex) => {\n          validateClaim(claim, `${path}.claims[${claimIndex}]`);\n          validationResults.summary.totalClaims++;\n        });\n      }\n    }\n\n    function validatePatient(patient, path) {\n      if (!patient.patient) {\n        addError('PATIENT', `${path}.patient`, null, 'Patient information is required');\n        return;\n      }\n      \n      const pat = patient.patient;\n      \n      if (!pat.firstName || pat.firstName.trim().length === 0) {\n        addError('PATIENT', `${path}.firstName`, pat.firstName, 'Patient first name is required');\n      }\n      \n      if (!pat.lastName || pat.lastName.trim().length === 0) {\n        addError('PATIENT', `${path}.lastName`, pat.lastName, 'Patient last name is required');\n      }\n      \n      // Patient relationship validation\n      if (patient.patientInfo && patient.patientInfo.individualRelationshipCode) {\n        const validRelationships = ['01', '18', '19', '20', '21', '22', '23', '24', '29', '32', '33', '36', '39', '40', '41', '43', '53'];\n        if (!validRelationships.includes(patient.patientInfo.individualRelationshipCode)) {\n          addWarning('PATIENT', `${path}.relationshipCode`, patient.patientInfo.individualRelationshipCode, 'Invalid relationship code');\n        }\n      }\n      \n      // Validate claims\n      if (patient.claims && Array.isArray(patient.claims)) {\n        patient.claims.forEach((claim, claimIndex) => {\n          validateClaim(claim, `${path}.claims[${claimIndex}]`);\n          validationResults.summary.totalClaims++;\n        });\n      }\n    }\n\n    function validateClaim(claim, path) {\n      if (!claim.claimSubmitterIdentifier || claim.claimSubmitterIdentifier.trim().length === 0) {\n        addError('CLAIM', `${path}.claimSubmitterIdentifier`, claim.claimSubmitterIdentifier, 'Claim ID is required');\n      }\n      \n      if (!claim.totalClaimChargeAmount || isNaN(parseFloat(claim.totalClaimChargeAmount))) {\n        addError('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Total claim charge must be a valid number');\n      } else {\n        const amount = parseFloat(claim.totalClaimChargeAmount);\n        if (amount <= 0) {\n          addError('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Claim amount must be greater than 0');\n        }\n        if (amount > 999999.99) {\n          addWarning('CLAIM', `${path}.totalClaimChargeAmount`, claim.totalClaimChargeAmount, 'Claim amount is unusually high');\n        }\n      }\n      \n      // Validate diagnosis codes\n      // if (!claim.diagnosisCodes || claim.diagnosisCodes.length === 0) {\n      //   addError('CLAIM', `${path}.diagnosisCodes`, null, 'At least one diagnosis code is required');\n      // } else {\n      //   claim.diagnosisCodes.forEach((diag, diagIndex) => {\n      //     if (!diag.diagnosisCode || diag.diagnosisCode.trim().length === 0) {\n      //       addError('DIAGNOSIS', `${path}.diagnosisCodes[${diagIndex}]`, diag.diagnosisCode, 'Diagnosis code cannot be empty');\n      //     }\n      //     // Basic ICD-10 format check (letter followed by digits and possibly more letters)\n      //     else if (!/^[A-Z]\\d{2,3}(\\.[A-Z0-9]{1,4})?$/.test(diag.diagnosisCode)) {\n      //       addWarning('DIAGNOSIS', `${path}.diagnosisCodes[${diagIndex}]`, diag.diagnosisCode, 'Diagnosis code may not be valid ICD-10 format');\n      //     }\n      //   });\n      // }\n      \n      // Validate service lines\n      if (!claim.serviceLines || claim.serviceLines.length === 0) {\n        addError('CLAIM', `${path}.serviceLines`, null, 'At least one service line is required');\n      } else {\n        let totalServiceCharges = 0;\n        \n        claim.serviceLines.forEach((service, serviceIndex) => {\n          if (!service.procedureCode || !/^\\d{5}$/.test(service.procedureCode)) {\n            addWarning('SERVICE', `${path}.serviceLines[${serviceIndex}].procedureCode`, service.procedureCode, 'HCPCS Code');\n          }\n          \n          if (!service.charge || isNaN(parseFloat(service.charge))) {\n            addError('SERVICE', `${path}.serviceLines[${serviceIndex}].charge`, service.charge, 'Service charge must be a valid number');\n          } else {\n            totalServiceCharges += parseFloat(service.charge);\n          }\n        \n          \n        });\n        \n        // Check if service line charges match claim total\n        const claimTotal = parseFloat(claim.totalClaimChargeAmount || 0);\n        if (Math.abs(totalServiceCharges - claimTotal) > 0.01) {\n          addWarning('CLAIM', `${path}.totalVsServices`, null, `Claim total ($${claimTotal}) doesn't match sum of service charges ($${totalServiceCharges})`);\n        }\n      }\n      \n      // If we get here without errors for this claim, count it as valid\n      if (validationResults.errors.filter(e => e.field.startsWith(path)).length === 0) {\n        validationResults.summary.validClaims++;\n      }\n    }\n\n  } catch (error) {\n    addError('VALIDATION', 'processing', null, `Validation processing error: ${error.message}`);\n  }\n\n  // Update summary counts\n  validationResults.summary.errorCount = validationResults.errors.length;\n  validationResults.summary.warningCount = validationResults.warnings.length;\n  \n  return validationResults;\n}\n\n// Main execution\nconst parsedEDI = $input.first().json;\n\nif (!parsedEDI) {\n  throw new Error('No parsed EDI data found in input');\n}\n\nconst validationResults = validateHealthcareEDI(parsedEDI);\n\n// Return both original data and validation results\nreturn {\n  json: {\n    originalData: parsedEDI,\n    validation: validationResults,\n    // Add flags for workflow routing\n    isValid: validationResults.isValid,\n    hasErrors: validationResults.errors.length > 0,\n    hasWarnings: validationResults.warnings.length > 0,\n    processingRecommendation: validationResults.isValid ? 'PROCEED' : 'REJECT'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        1200
      ],
      "id": "c3589413-4449-4358-a920-3832558867c9",
      "name": "EDI Data Quality & Validation Node (Dental)"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.processingRecommendation }}",
                    "rightValue": "PROCEED",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b22842a1-c9b5-47cb-aed6-aadc573cd87e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PROCEED"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9f7ba611-d5aa-4939-b7bd-32c7503ac1ad",
                    "leftValue": "={{ $json.processingRecommendation }}",
                    "rightValue": "REJECT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "REJECT"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        512,
        432
      ],
      "id": "9361baae-ffda-4832-8a76-7855cda474fc",
      "name": "Validation Check"
    },
    {
      "parameters": {
        "jsCode": "return $json.originalData;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        1200
      ],
      "id": "6db6384e-79a2-4307-b07e-57064931ba8d",
      "name": "Extract1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.processingRecommendation }}",
                    "rightValue": "PROCEED",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b22842a1-c9b5-47cb-aed6-aadc573cd87e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PROCEED"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9f7ba611-d5aa-4939-b7bd-32c7503ac1ad",
                    "leftValue": "={{ $json.processingRecommendation }}",
                    "rightValue": "REJECT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "REJECT"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        496,
        1200
      ],
      "id": "96cbcf23-8694-41af-b010-2e1a0d189b79",
      "name": "Dental Validation Check"
    },
    {
      "parameters": {
        "jsCode": "function transformToClaims(parsedEDI) {\n  const claims = [];\n  \n  const headerObj = {\n    interchange_Sender_ID: parsedEDI.interchangeHeader?.submitterId?.trim() || '',\n    interchange_Receiver_ID: parsedEDI.interchangeHeader?.receiverId?.trim() || '',\n    interchange_Date: parsedEDI.interchangeHeader?.date || '',\n    transaction_Set_ID: parsedEDI.transactionSetHeader?.transactionSetIdentifierCode || '',\n    submitter_Name: parsedEDI.submitter?.submitterName || '',\n    receiver_Name: parsedEDI.receiver?.receiverName || '',\n    billing_Provider_Name: parsedEDI.billingProvider?.billingProviderName || ''\n  };\n  \n  if (parsedEDI.hierarchicalLoops && Array.isArray(parsedEDI.hierarchicalLoops)) {\n    parsedEDI.hierarchicalLoops.forEach((hl) => {\n      // Handle Loop 2000A (Billing Provider) - contains subscribers and patients\n      if (hl.loop === '2000A') {\n        \n        // Process subscribers within the billing provider\n        if (hl.subscribers && Array.isArray(hl.subscribers)) {\n          hl.subscribers.forEach((subscriber) => {\n            if (subscriber.claims && Array.isArray(subscriber.claims)) {\n              subscriber.claims.forEach((claim) => {\n                const claimObj = {\n                  ...headerObj,\n                  patient_First_Name: subscriber.subscriber?.firstName || '',\n                  patient_Last_Name: subscriber.subscriber?.lastName || '',\n                  patient_ID: subscriber.subscriber?.memberId || '',\n                  payer_Name: subscriber.payer?.payerName || '',\n                  patient_Birthdate: subscriber.demographicInfo?.birthdate || '',\n                  patient_Gender: subscriber.demographicInfo?.gender || '',\n                  claim_ID: claim.claimSubmitterIdentifier || '',\n                  total_Claim_Charge: claim.totalClaimChargeAmount || '0.00',\n                  service_Count: claim.serviceLines?.length || 0\n                };\n                \n                // If claim has service lines, create a row for each service\n                if (claim.serviceLines && claim.serviceLines.length > 0) {\n                  claim.serviceLines.forEach((service) => {\n                    claims.push({\n                      ...claimObj,\n                      service_Line_Number: service.lineNumber || '',\n                      service_Charge: service.charge || '0.00',\n                      service_Date: service.serviceDate || '',\n                      service_Units: service.units || '',\n                      // Dental-specific fields\n                      dental_Procedure_Code: service.dentalProcedureCode || '',\n                      tooth_Number: service.toothInfo?.toothNumber || '',\n                      tooth_System_Code: service.toothInfo?.toothSystemCode || '',\n                      tooth_Surface: service.toothInfo?.toothSurface || ''\n                    });\n                  });\n                } else {\n                  // Claim without services\n                  claims.push({\n                    ...claimObj,\n                    service_Line_Number: '',\n                    service_Charge: '0.00',\n                    service_Date: '',\n                    service_Units: '',\n                    dental_Procedure_Code: '',\n                    tooth_Number: '',\n                    tooth_System_Code: '',\n                    tooth_Surface: ''\n                  });\n                }\n              });\n            }\n          });\n        }\n        \n        // Process patients within the billing provider\n        if (hl.patients && Array.isArray(hl.patients)) {\n          hl.patients.forEach((patient) => {\n            if (patient.claims && Array.isArray(patient.claims)) {\n              // Find the corresponding subscriber for payer information\n              const parentSubscriber = hl.subscribers?.find(sub => \n                sub.hierarchicalId === patient.hierarchicalParent\n              );\n              \n              patient.claims.forEach((claim) => {\n                const claimObj = {\n                  ...headerObj,\n                  patient_First_Name: patient.patient?.firstName || '',\n                  patient_Last_Name: patient.patient?.lastName || '',\n                  patient_ID: patient.patient?.patientId || parentSubscriber?.subscriber?.memberId || '',\n                  payer_Name: parentSubscriber?.payer?.payerName || '',\n                  patient_Birthdate: patient.demographicInfo?.birthdate || '',\n                  patient_Gender: patient.demographicInfo?.gender || '',\n                  claim_ID: claim.claimSubmitterIdentifier || '',\n                  total_Claim_Charge: claim.totalClaimChargeAmount || '0.00',\n                  service_Count: claim.serviceLines?.length || 0\n                };\n                \n                // If claim has service lines, create a row for each service\n                if (claim.serviceLines && claim.serviceLines.length > 0) {\n                  claim.serviceLines.forEach((service) => {\n                    claims.push({\n                      ...claimObj,\n                      service_Line_Number: service.lineNumber || '',\n                      service_Charge: service.charge || '0.00',\n                      service_Date: service.serviceDate || '',\n                      service_Units: service.units || '',\n                      // Dental-specific fields\n                      dental_Procedure_Code: service.dentalProcedureCode || '',\n                      tooth_Number: service.toothInfo?.toothNumber || '',\n                      tooth_System_Code: service.toothInfo?.toothSystemCode || ''\n                    });\n                  });\n                } else {\n                  // Claim without services\n                  claims.push({\n                    ...claimObj,\n                    service_Line_Number: '',\n                    service_Charge: '0.00',\n                    service_Date: '',\n                    service_Units: '',\n                    dental_Procedure_Code: '',\n                    tooth_Number: '',\n                    tooth_System_Code: '',\n                    tooth_Surface: ''\n                  });\n                }\n              });\n            }\n          });\n        }\n      }\n      \n    });\n  }\n  \n  return claims;\n}\n\nconst parsedEDI = $input.all()[0].json;\nif (!parsedEDI || !parsedEDI.interchangeHeader) {\n  throw new Error('Invalid healthcare EDI data format.');\n}\n\nconst claimsData = transformToClaims(parsedEDI);\nreturn { json: { data: claimsData } };"
      },
      "id": "4f13ccd9-9421-47a4-b94e-ee75374d5a2a",
      "name": "Flatten Dental Data",
      "type": "n8n-nodes-base.code",
      "position": [
        1120,
        1296
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a55ebbb4-3eba-4584-8894-9e8d623d498f",
              "name": "documentType",
              "type": "string",
              "value": "=Healthcare Claim (837)"
            },
            {
              "id": "cbbff4da-4679-4258-bc3c-848075c5f1df",
              "name": "claimReferenceId",
              "type": "string",
              "value": "={{ $json.transactionSetHeader.implementationConventionReference }}"
            },
            {
              "id": "a2eb5f07-8d1b-4c3a-b08b-a785045aeb34",
              "name": "claimDate",
              "type": "string",
              "value": "={{ $json.interchangeHeader.date }}"
            },
            {
              "id": "7e319d29-463b-4875-b556-684cb0c06c59",
              "name": "submitterName",
              "type": "string",
              "value": "={{ $json.submitter.submitterName }}"
            },
            {
              "id": "5c9fc86c-e5c0-411f-a7d5-1121b5779906",
              "name": "billingProviderName",
              "type": "string",
              "value": "={{ $json.billingProvider.billingProviderName }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b3dcd18d-349c-41a1-9e79-102140f9f961",
      "name": "Dental Claim Information",
      "type": "n8n-nodes-base.set",
      "position": [
        1232,
        1104
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "// Get the parsed EDI data\nconst parsedEDI = $input.first().json;\n\n// The parsed data is an array, so get the first element\nconst ediData = Array.isArray(parsedEDI) ? parsedEDI[0] : parsedEDI;\n\n// Extract claimants from the new nested structure\nconst claimantLoops = [];\n\nif (ediData.hierarchicalLoops && Array.isArray(ediData.hierarchicalLoops)) {\n  ediData.hierarchicalLoops.forEach(hl => {\n    if (hl.loop === '2000A') {\n      // Get subscribers from within billing provider\n      if (hl.subscribers && Array.isArray(hl.subscribers)) {\n        hl.subscribers.forEach(subscriber => {\n          if (subscriber.claims && subscriber.claims.length > 0) {\n            claimantLoops.push(subscriber);\n          }\n        });\n      }\n      \n      // Get patients from within billing provider\n      if (hl.patients && Array.isArray(hl.patients)) {\n        hl.patients.forEach(patient => {\n          if (patient.claims && patient.claims.length > 0) {\n            // Add subscriber context to patient for insurance info\n            const parentSubscriber = hl.subscribers?.find(sub => \n              sub.hierarchicalId === patient.hierarchicalParent\n            );\n            patient._parentSubscriber = parentSubscriber;\n            claimantLoops.push(patient);\n          }\n        });\n      }\n    }\n  });\n}\n\nconst parsedSummary = ediData.summary;\n\nfunction formatDate(dateStr) {\n    if (!dateStr || dateStr.length < 8) return 'N/A';\n    const year = dateStr.substring(0, 4);\n    const month = dateStr.substring(4, 6);\n    const day = dateStr.substring(6, 8);\n    return `${month}/${day}/${year.substring(2)}`;\n}\n\nfunction cleanText(text) {\n    return text ? text.replace(/\\n/g, ' ').trim() : 'N/A';\n}\n\n// Generate patient sections\nconst patientSections = claimantLoops.map((claimant, index) => {\n    const firstClaim = claimant.claims?.[0];\n    const services = firstClaim?.serviceLines || [];\n    \n    // Determine if this is a subscriber or patient\n    const isPatient = claimant.loop === '2000C';\n    const displayEntity = isPatient ? claimant.patient : claimant.subscriber;\n    \n    // Get subscriber info for context - either self or parent\n    const subscriberInfo = isPatient ? claimant._parentSubscriber : claimant;\n    \n    const displayName = displayEntity ? \n        `${cleanText(displayEntity.lastName)}, ${cleanText(displayEntity.firstName)}` : \n        'Unknown Patient';\n    \n    return `\n        <div class=\"patient-section\">\n            <h2 style=\"background: #e3f2fd; padding: 15px; margin: 0 0 20px 0; border-radius: 5px;\">\n                ${isPatient ? 'Patient' : 'Subscriber'} ${index + 1}: ${displayName}\n            </h2>\n            \n            <!-- Patient Key Info -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ ${isPatient ? 'PATIENT' : 'SUBSCRIBER'} INFORMATION</span>\n                    <span class=\"npi-badge\">MEMBER ID: ${subscriberInfo?.subscriber?.memberId || displayEntity?.memberId || displayEntity?.idCode || 'N/A'}</span>\n                </div>\n                <div class=\"section-content\">\n                    <div class=\"info-group\">\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Name</div>\n                            <div class=\"info-value\">${displayName}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Member ID</div>\n                            <div class=\"info-value\">${subscriberInfo?.subscriber?.memberId || displayEntity?.memberId || 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Date of Birth</div>\n                            <div class=\"info-value\">${claimant.demographicInfo ? formatDate(claimant.demographicInfo.birthdate) : 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Gender</div>\n                            <div class=\"info-value\">${\n                                (() => {\n                                    const gender = claimant.demographicInfo?.gender;\n                                    return gender === 'M' ? 'Male' : gender === 'F' ? 'Female' : 'N/A';\n                                })()\n                            }</div>\n                        </div>\n                    </div>\n                    <div class=\"info-group\">\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Relationship to Subscriber</div>\n                            <div class=\"info-value\">${isPatient ? (claimant.patientInfo?.individualRelationshipCode || 'N/A') : 'Self'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Address</div>\n                            <div class=\"info-value\">\n                                ${displayEntity?.address ? \n                                    `${cleanText(displayEntity.address.addressLine1)}<br>\n                                     ${displayEntity.address.city || ''}, ${displayEntity.address.state || ''} ${displayEntity.address.postalCode || ''}` \n                                    : 'N/A'\n                                }\n                            </div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Payer</div>\n                            <div class=\"info-value\">${cleanText(subscriberInfo?.payer?.payerName)}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Payor ID</div>\n                            <div class=\"info-value\">${subscriberInfo?.payer?.payorID || 'N/A'}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Claim Information -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ CLAIM INFORMATION</span>\n                </div>\n                <div class=\"section-content\">\n                    <div class=\"info-group\">\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Claim ID</div>\n                            <div class=\"info-value\">${firstClaim?.claimSubmitterIdentifier || 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Total Charge</div>\n                            <div class=\"info-value\">$${firstClaim?.totalClaimChargeAmount || '0.00'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Rendering Provider</div>\n                            <div class=\"info-value\">${firstClaim?.operatingPhysician ? `${cleanText(firstClaim.operatingPhysician.lastName)}, ${cleanText(firstClaim.operatingPhysician.firstName)}` : 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Provider NPI</div>\n                            <div class=\"info-value\">${firstClaim?.operatingPhysician?.npi || 'N/A'}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Services -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ SERVICE LINES (${services.length})</span>\n                </div>\n                <div class=\"section-content\">\n                    <table class=\"service-table\">\n                        <thead>\n                            <tr>\n                                <th>Line</th>\n                                <th>Procedure Code</th>\n                                <th>Charge</th>\n                                <th>Units</th>\n                                <th>Service Date</th>\n                                <th>Place of Service</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${services.length > 0 \n                                ? services.map((service, idx) => `\n                                    <tr>\n                                        <td>${service.lineNumber || (idx + 1)}</td>\n                                        <td><a href=\"#\" class=\"code-link\">${service.dentalProcedureCode || 'N/A'}</a></td>\n                                        <td>$${service.charge || '0.00'}</td>\n                                        <td>${service.units || '1'}</td>\n                                        <td>${formatDate(service.serviceDate)}</td>\n                                        <td>${service.placeOfServiceCode || 'N/A'}</td>\n                                    </tr>\n                                `).join('')\n                                : '<tr><td colspan=\"6\" style=\"text-align: center; color: #6c757d; font-style: italic;\">No service lines found</td></tr>'\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    `;\n}).join('');\n\n// Calculate totals across all patients\nconst totalPatients = claimantLoops.length;\nconst totalCharges = claimantLoops.reduce((total, claimant) => {\n    const claimAmount = parseFloat(claimant.claims?.[0]?.totalClaimChargeAmount || 0);\n    return total + claimAmount;\n}, 0);\n\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>X12 EDI 837 - Claims Information</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f5f5f5; padding: 20px; color: #333; }\n        .claim-container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); overflow: hidden; }\n        .claim-header { background: #f8f9fa; padding: 20px; border-bottom: 1px solid #dee2e6; }\n        .claim-title { font-size: 28px; font-weight: 600; margin-bottom: 10px; }\n        .header-info { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 15px; }\n        .header-item { text-align: center; }\n        .header-value { font-size: 18px; font-weight: 600; color: #495057; }\n        .header-label { font-size: 12px; color: #6c757d; text-transform: uppercase; margin-top: 2px; }\n        .content { padding: 20px; }\n        .section { margin-bottom: 30px; border: 1px solid #dee2e6; border-radius: 6px; overflow: hidden; }\n        .section-header { background: #f8f9fa; padding: 15px 20px; font-weight: 600; font-size: 14px; color: #495057; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #dee2e6; }\n        .section-content { padding: 20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }\n        .info-group { display: flex; flex-direction: column; gap: 8px; }\n        .info-item { display: flex; justify-content: space-between; align-items: flex-start; padding: 8px 0; border-bottom: 1px solid #f1f3f4; }\n        .info-label { font-size: 12px; color: #6c757d; text-transform: uppercase; font-weight: 500; flex: 1; margin-right: 15px; }\n        .info-value { font-size: 14px; color: #495057; font-weight: 500; flex: 2; text-align: right; }\n        .service-table { width: 100%; border-collapse: collapse; margin-top: 15px; }\n        .service-table th { background: #f8f9fa; padding: 12px; text-align: left; font-weight: 600; font-size: 12px; color: #495057; text-transform: uppercase; border-bottom: 2px solid #dee2e6; }\n        .service-table td { padding: 12px; border-bottom: 1px solid #f1f3f4; font-size: 14px; }\n        .code-link { color: #007bff; text-decoration: none; font-weight: 500; }\n        .npi-badge { background: #e7f3ff; color: #0066cc; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; }\n        .patient-section { margin-bottom: 40px; padding-bottom: 30px; border-bottom: 3px solid #e9ecef; }\n        .patient-section:last-child { border-bottom: none; }\n    </style>\n</head>\n<body>\n    <div class=\"claim-container\">\n        <div class=\"claim-header\">\n            <h1 class=\"claim-title\">X12 EDI 837 - Claims Information</h1>\n            <div class=\"header-info\">\n                <div class=\"header-item\">\n                    <div class=\"header-value\">${totalPatients}</div>\n                    <div class=\"header-label\">TOTAL PATIENTS</div>\n                </div>\n                <div class=\"header-item\">\n                    <div class=\"header-value\">$${totalCharges.toFixed(2)}</div>\n                    <div class=\"header-label\">TOTAL CHARGES</div>\n                </div>\n                <div class=\"header-item\">\n                    <div class=\"header-value\">${formatDate(ediData.beginningOfHierarchicalTransaction?.date)}</div>\n                    <div class=\"header-label\">SUBMISSION DATE</div>\n                </div>\n                <div class=\"header-item\">\n                    <div class=\"header-value\">${cleanText(ediData.submitter?.submitterName)}</div>\n                    <div class=\"header-label\">SUBMITTER</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"content\">\n            <!-- Billing Provider Info (same for all patients) -->\n            <div class=\"section\">\n                <div class=\"section-header\">\n                    <span>▼ BILLING PROVIDER</span>\n                    <span class=\"npi-badge\">NPI: ${ediData.billingProvider?.billingProviderIdentifier || 'N/A'}</span>\n                </div>\n                <div class=\"section-content\">\n                    <div class=\"info-group\">\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Business Name</div>\n                            <div class=\"info-value\">${cleanText(ediData.billingProvider?.billingProviderName)}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">NPI</div>\n                            <div class=\"info-value\">${ediData.billingProvider?.billingProviderIdentifier || 'N/A'}</div>\n                        </div>\n                        <div class=\"info-item\">\n                            <div class=\"info-label\">Address</div>\n                            <div class=\"info-value\">\n                                ${ediData.billingProvider?.address ? \n                                    `${cleanText(ediData.billingProvider.address.addressLine1)}<br>\n                                     ${ediData.billingProvider.address.city || ''}, ${ediData.billingProvider.address.state || ''} ${ediData.billingProvider.address.postalCode || ''}` \n                                    : 'N/A'\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Individual Patient Sections -->\n            ${patientSections}\n        </div>\n    </div>\n</body>\n</html>`;\n\nreturn { json: { html: html } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        1488
      ],
      "id": "ae68602f-e3fd-4284-b454-b0c0fde1bd9a",
      "name": "EDI Dental Data Setup for HTML"
    },
    {
      "parameters": {
        "jsCode": "// Error reporting node\nconst validation = $input.first().json.validation;\nconst errorSummary = {\n  timestamp: new Date().toISOString(),\n  fileName: 'X12 EDI 837P',\n  totalErrors: validation.errors.length,\n  totalWarnings: validation.warnings.length,\n  criticalErrors: validation.errors.filter(e => e.severity === 'ERROR'),\n  submitterId: $input.first().json.originalData?.interchangeHeader?.submitterId || 'Unknown'\n};\n\nreturn { json: errorSummary };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        1424
      ],
      "id": "34d516e7-38d6-4b77-8f7d-a3157071ed5b",
      "name": "Dental Error Report"
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "id": "bd220506-5427-479d-934f-32da03437b01",
      "name": "Split Out by Hierarchical Level for Dental",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1344,
        1296
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "html": "{{ $json.html }}"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        1344,
        1488
      ],
      "id": "2b8a59e9-d9a2-45c3-bc41-841e95110ff4",
      "name": "Healthcare Claims HTML Display for Dental",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4",
          "mode": "list",
          "cachedResultName": "Healthcare EDI",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 577604059,
          "mode": "list",
          "cachedResultName": "Error Report",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4/edit#gid=577604059"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "fileName",
              "displayName": "fileName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "totalErrors",
              "displayName": "totalErrors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "totalWarnings",
              "displayName": "totalWarnings",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "criticalErrors",
              "displayName": "criticalErrors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "submitterId",
              "displayName": "submitterId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "8dc1ddb1-0abc-47cb-baf2-a10769ca3c74",
      "name": "Document Error for Dental File",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1120,
        1696
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zQDGxhNE1O5PANgU",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combineBySql"
      },
      "id": "39c7833a-872e-4426-9fd3-6a6c35e63536",
      "name": "Dental: Claim Info + Hierarchical Data",
      "type": "n8n-nodes-base.merge",
      "position": [
        1648,
        1184
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4",
          "mode": "list",
          "cachedResultName": "Healthcare EDI",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1615374947,
          "mode": "list",
          "cachedResultName": "Dental",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dRfOtNpUeNH_ueYwaSLcqm3BrjVc25V1DaFQ_A_gaa4/edit#gid=1615374947"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "claimReferenceId",
              "displayName": "claimReferenceId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "claimDate",
              "displayName": "claimDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "submitterName",
              "displayName": "submitterName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billingProviderName",
              "displayName": "billingProviderName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Sender_ID",
              "displayName": "interchange_Sender_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Receiver_ID",
              "displayName": "interchange_Receiver_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "interchange_Date",
              "displayName": "interchange_Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "transaction_Set_ID",
              "displayName": "transaction_Set_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "submitter_Name",
              "displayName": "submitter_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "receiver_Name",
              "displayName": "receiver_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "billing_Provider_Name",
              "displayName": "billing_Provider_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_First_Name",
              "displayName": "patient_First_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_Last_Name",
              "displayName": "patient_Last_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_ID",
              "displayName": "patient_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "payer_Name",
              "displayName": "payer_Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_Birthdate",
              "displayName": "patient_Birthdate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "patient_Gender",
              "displayName": "patient_Gender",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "claim_ID",
              "displayName": "claim_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "total_Claim_Charge",
              "displayName": "total_Claim_Charge",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "diagnosis_Codes",
              "displayName": "diagnosis_Codes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Count",
              "displayName": "service_Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Line_Number",
              "displayName": "service_Line_Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "procedure_Code",
              "displayName": "procedure_Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Charge",
              "displayName": "service_Charge",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Date",
              "displayName": "service_Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Units",
              "displayName": "service_Units",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "dental_Procedure_Code",
              "displayName": "dental_Procedure_Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tooth_Number",
              "displayName": "tooth_Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tooth_System_Code",
              "displayName": "tooth_System_Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tooth_Surface",
              "displayName": "tooth_Surface",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "oral_Cavity_Designation",
              "displayName": "oral_Cavity_Designation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "revenue_Code",
              "displayName": "revenue_Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_Type",
              "displayName": "service_Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "a462dd14-8306-4982-995b-a76055a732e7",
      "name": "Dental: Healthcare Claims",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1872,
        1184
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zQDGxhNE1O5PANgU",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Healthcare Claim Information": {
      "main": [
        [
          {
            "node": "Claim Info + Hierarchical Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Body": {
      "main": [
        [
          {
            "node": "837 Version Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claim Info + Hierarchical Data": {
      "main": [
        [
          {
            "node": "Healthcare Claims",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flatten Healthcare Data": {
      "main": [
        [
          {
            "node": "Split Out by Hierarchical Level",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out by Hierarchical Level": {
      "main": [
        [
          {
            "node": "Claim Info + Hierarchical Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EDI Data Setup for HTML": {
      "main": [
        [
          {
            "node": "Healthcare Claims HTML Display",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Extract Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract": {
      "main": [
        [
          {
            "node": "Healthcare Claim Information",
            "type": "main",
            "index": 0
          },
          {
            "node": "Flatten Healthcare Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "EDI Data Setup for HTML",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Report": {
      "main": [
        [
          {
            "node": "Document Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "837 Version Check": {
      "main": [
        [
          {
            "node": "Parse Healthcare EDI Message (Professional)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Healthcare EDI Message (Institutional)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Healthcare EDI Message (Dental)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Healthcare EDI Message (Professional)": {
      "main": [
        [
          {
            "node": "EDI Data Quality & Validation Node (Professional)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Healthcare EDI Message (Institutional)": {
      "main": [
        [
          {
            "node": "EDI Data Quality & Validation Node (Institutional)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Healthcare EDI Message (Dental)": {
      "main": [
        [
          {
            "node": "EDI Data Quality & Validation Node (Dental)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EDI Data Quality & Validation Node (Professional)": {
      "main": [
        [
          {
            "node": "Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EDI Data Quality & Validation Node (Institutional)": {
      "main": [
        [
          {
            "node": "Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EDI Data Quality & Validation Node (Dental)": {
      "main": [
        [
          {
            "node": "Dental Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Check": {
      "main": [
        [
          {
            "node": "Extract",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract1": {
      "main": [
        [
          {
            "node": "Flatten Dental Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "EDI Dental Data Setup for HTML",
            "type": "main",
            "index": 0
          },
          {
            "node": "Dental Claim Information",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dental Validation Check": {
      "main": [
        [
          {
            "node": "Extract1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Dental Error Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flatten Dental Data": {
      "main": [
        [
          {
            "node": "Split Out by Hierarchical Level for Dental",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dental Claim Information": {
      "main": [
        [
          {
            "node": "Dental: Claim Info + Hierarchical Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EDI Dental Data Setup for HTML": {
      "main": [
        [
          {
            "node": "Healthcare Claims HTML Display for Dental",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dental Error Report": {
      "main": [
        [
          {
            "node": "Document Error for Dental File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out by Hierarchical Level for Dental": {
      "main": [
        [
          {
            "node": "Dental: Claim Info + Hierarchical Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dental: Claim Info + Hierarchical Data": {
      "main": [
        [
          {
            "node": "Dental: Healthcare Claims",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "59f3538c-19a2-48fc-b40c-db5c6ec33c2b",
  "meta": {
    "instanceId": "4c4dfe4beb84b1c0ed4efd36fc6745c4a2d797f8c835701ecc9ceca73ff028c0"
  },
  "id": "g0oB9WIkJqTkMsVo",
  "tags": []
}